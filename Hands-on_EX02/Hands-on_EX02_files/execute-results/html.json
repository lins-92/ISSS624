{
  "hash": "23aa6ce468e41c380e07745072b6094e",
  "result": {
    "markdown": "---\ntitle: \"Hands-on Exercise 2\"\neditor: visual\n---\n\n\n# Global and Local Measures for Spatial Autocorrelation\n\n### What is spatial autocorrelation?\n\nSpatial autocorrelation measures the degree to which one object is similar to other nearby objects. Spatial autocorrelation is an important consideration in geospatial analysis because it means that observations are not independent of each other.\n\nOne of the common measures of spatial autocorrelation is Moran's I. It takes a value between -1 and 1. The closer the value is to 1, the more clustered the dependent variable is spatially; the closer the value is to 01, the more dispersed the dependent variable is.\n\n![Adapted from https://www.statology.org/morans-i/](images/morans.png)\n\nThis exercise is to practice how to computing spatiial autocorrelation.\n\n### Loading Packages\n\nWe will use the following packages:\n\n-   `sf`: import geospatial datasets\n\n-   `tidyverse`: manipulate aspatial data\n\n-   `spdep`: compute spatial weights and autocorrelation\n\n-   `tmap`: plot maps\n\n\n\n\n\n### Importing and Preparing Data\n\nThis dataset contains the administrative boundaries of the Hunan province in China.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhunan <- st_read(dsn=\"data/geospatial\",\n                 layer=\"Hunan\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nReading layer `Hunan' from data source \n  `D:\\lins-92\\ISSS624\\Hands-on_EX02\\data\\geospatial' using driver `ESRI Shapefile'\nSimple feature collection with 88 features and 7 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 108.7831 ymin: 24.6342 xmax: 114.2544 ymax: 30.12812\nGeodetic CRS:  WGS 84\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nglimpse(hunan)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 88\nColumns: 8\n$ NAME_2     <chr> \"Changde\", \"Changde\", \"Changde\", \"Changde\", \"Changde\", \"Cha…\n$ ID_3       <int> 21098, 21100, 21101, 21102, 21103, 21104, 21109, 21110, 211…\n$ NAME_3     <chr> \"Anxiang\", \"Hanshou\", \"Jinshi\", \"Li\", \"Linli\", \"Shimen\", \"L…\n$ ENGTYPE_3  <chr> \"County\", \"County\", \"County City\", \"County\", \"County\", \"Cou…\n$ Shape_Leng <dbl> 1.869074, 2.360691, 1.425620, 3.474325, 2.289506, 4.171918,…\n$ Shape_Area <dbl> 0.10056190, 0.19978745, 0.05302413, 0.18908121, 0.11450357,…\n$ County     <chr> \"Anxiang\", \"Hanshou\", \"Jinshi\", \"Li\", \"Linli\", \"Shimen\", \"L…\n$ geometry   <POLYGON [°]> POLYGON ((112.0625 29.75523..., POLYGON ((112.2288 …\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(hunan, n=5) %>%\n  kable() %>%\n  kable_styling()\n```\n\n::: {.cell-output-display}\n`````{=html}\n<table class=\"table\" style=\"margin-left: auto; margin-right: auto;\">\n <thead>\n  <tr>\n   <th style=\"text-align:left;\"> NAME_2 </th>\n   <th style=\"text-align:right;\"> ID_3 </th>\n   <th style=\"text-align:left;\"> NAME_3 </th>\n   <th style=\"text-align:left;\"> ENGTYPE_3 </th>\n   <th style=\"text-align:right;\"> Shape_Leng </th>\n   <th style=\"text-align:right;\"> Shape_Area </th>\n   <th style=\"text-align:left;\"> County </th>\n   <th style=\"text-align:left;\"> geometry </th>\n  </tr>\n </thead>\n<tbody>\n  <tr>\n   <td style=\"text-align:left;\"> Changde </td>\n   <td style=\"text-align:right;\"> 21098 </td>\n   <td style=\"text-align:left;\"> Anxiang </td>\n   <td style=\"text-align:left;\"> County </td>\n   <td style=\"text-align:right;\"> 1.869074 </td>\n   <td style=\"text-align:right;\"> 0.1005619 </td>\n   <td style=\"text-align:left;\"> Anxiang </td>\n   <td style=\"text-align:left;\"> POLYGON ((112.0625 29.75523... </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Changde </td>\n   <td style=\"text-align:right;\"> 21100 </td>\n   <td style=\"text-align:left;\"> Hanshou </td>\n   <td style=\"text-align:left;\"> County </td>\n   <td style=\"text-align:right;\"> 2.360691 </td>\n   <td style=\"text-align:right;\"> 0.1997875 </td>\n   <td style=\"text-align:left;\"> Hanshou </td>\n   <td style=\"text-align:left;\"> POLYGON ((112.2288 29.11684... </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Changde </td>\n   <td style=\"text-align:right;\"> 21101 </td>\n   <td style=\"text-align:left;\"> Jinshi </td>\n   <td style=\"text-align:left;\"> County City </td>\n   <td style=\"text-align:right;\"> 1.425620 </td>\n   <td style=\"text-align:right;\"> 0.0530241 </td>\n   <td style=\"text-align:left;\"> Jinshi </td>\n   <td style=\"text-align:left;\"> POLYGON ((111.8927 29.6013,... </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Changde </td>\n   <td style=\"text-align:right;\"> 21102 </td>\n   <td style=\"text-align:left;\"> Li </td>\n   <td style=\"text-align:left;\"> County </td>\n   <td style=\"text-align:right;\"> 3.474324 </td>\n   <td style=\"text-align:right;\"> 0.1890812 </td>\n   <td style=\"text-align:left;\"> Li </td>\n   <td style=\"text-align:left;\"> POLYGON ((111.3731 29.94649... </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Changde </td>\n   <td style=\"text-align:right;\"> 21103 </td>\n   <td style=\"text-align:left;\"> Linli </td>\n   <td style=\"text-align:left;\"> County </td>\n   <td style=\"text-align:right;\"> 2.289506 </td>\n   <td style=\"text-align:right;\"> 0.1145036 </td>\n   <td style=\"text-align:left;\"> Linli </td>\n   <td style=\"text-align:left;\"> POLYGON ((111.6324 29.76288... </td>\n  </tr>\n</tbody>\n</table>\n\n`````\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(hunan) +\n  tm_polygons() +\n  tm_text(\"County\", size=0.5)\n```\n\n::: {.cell-output-display}\n![](Hands-on_EX02_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n:::\n\n\nNow let's load the attribute data. This dataset contains some economic indicators of counties in the Hunan province.\n\n\n::: {.cell}\n\n```{.r .cell-code}\necon <- read_csv(\"data/aspatial/Hunan_2012.csv\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nRows: 88 Columns: 29\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (2): County, City\ndbl (27): avg_wage, deposite, FAI, Gov_Rev, Gov_Exp, GDP, GDPPC, GIO, Loan, ...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n:::\n\n```{.r .cell-code}\nglimpse(econ)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 88\nColumns: 29\n$ County      <chr> \"Anhua\", \"Anren\", \"Anxiang\", \"Baojing\", \"Chaling\", \"Changn…\n$ City        <chr> \"Yiyang\", \"Chenzhou\", \"Changde\", \"Hunan West\", \"Zhuzhou\", …\n$ avg_wage    <dbl> 30544, 28058, 31935, 30843, 31251, 28518, 54540, 28597, 33…\n$ deposite    <dbl> 10967.0, 4598.9, 5517.2, 2250.0, 8241.4, 10860.0, 24332.0,…\n$ FAI         <dbl> 6831.7, 6386.1, 3541.0, 1005.4, 6508.4, 7920.0, 33624.0, 1…\n$ Gov_Rev     <dbl> 456.72, 220.57, 243.64, 192.59, 620.19, 769.86, 5350.00, 1…\n$ Gov_Exp     <dbl> 2703.0, 1454.7, 1779.5, 1379.1, 1947.0, 2631.6, 7885.5, 11…\n$ GDP         <dbl> 13225.0, 4941.2, 12482.0, 4087.9, 11585.0, 19886.0, 88009.…\n$ GDPPC       <dbl> 14567, 12761, 23667, 14563, 20078, 24418, 88656, 10132, 17…\n$ GIO         <dbl> 9276.90, 4189.20, 5108.90, 3623.50, 9157.70, 37392.00, 513…\n$ Loan        <dbl> 3954.90, 2555.30, 2806.90, 1253.70, 4287.40, 4242.80, 4053…\n$ NIPCR       <dbl> 3528.3, 3271.8, 7693.7, 4191.3, 3887.7, 9528.0, 17070.0, 3…\n$ Bed         <dbl> 2718, 970, 1931, 927, 1449, 3605, 3310, 582, 2170, 2179, 1…\n$ Emp         <dbl> 494.310, 290.820, 336.390, 195.170, 330.290, 548.610, 670.…\n$ EmpR        <dbl> 441.4, 255.4, 270.5, 145.6, 299.0, 415.1, 452.0, 127.6, 21…\n$ EmpRT       <dbl> 338.0, 99.4, 205.9, 116.4, 154.0, 273.7, 219.4, 94.4, 174.…\n$ Pri_Stu     <dbl> 54.175, 33.171, 19.584, 19.249, 33.906, 81.831, 59.151, 18…\n$ Sec_Stu     <dbl> 32.830, 17.505, 17.819, 11.831, 20.548, 44.485, 39.685, 7.…\n$ Household   <dbl> 290.4, 104.6, 148.1, 73.2, 148.7, 211.2, 300.3, 76.1, 139.…\n$ Household_R <dbl> 234.5, 121.9, 135.4, 69.9, 139.4, 211.7, 248.4, 59.6, 110.…\n$ NOIP        <dbl> 101, 34, 53, 18, 106, 115, 214, 17, 55, 70, 44, 84, 74, 17…\n$ Pop_R       <dbl> 670.3, 243.2, 346.0, 184.1, 301.6, 448.2, 475.1, 189.6, 31…\n$ RSCG        <dbl> 5760.60, 2386.40, 3957.90, 768.04, 4009.50, 5220.40, 22604…\n$ Pop_T       <dbl> 910.8, 388.7, 528.3, 281.3, 578.4, 816.3, 998.6, 256.7, 45…\n$ Agri        <dbl> 4942.253, 2357.764, 4524.410, 1118.561, 3793.550, 6430.782…\n$ Service     <dbl> 5414.5, 3814.1, 14100.0, 541.8, 5444.0, 13074.6, 17726.6, …\n$ Disp_Inc    <dbl> 12373, 16072, 16610, 13455, 20461, 20868, 183252, 12379, 1…\n$ RORP        <dbl> 0.7359464, 0.6256753, 0.6549309, 0.6544614, 0.5214385, 0.5…\n$ ROREmp      <dbl> 0.8929619, 0.8782065, 0.8041262, 0.7460163, 0.9052651, 0.7…\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(econ, n=5) %>%\n  kable() %>%\n  kable_styling()\n```\n\n::: {.cell-output-display}\n`````{=html}\n<table class=\"table\" style=\"margin-left: auto; margin-right: auto;\">\n <thead>\n  <tr>\n   <th style=\"text-align:left;\"> County </th>\n   <th style=\"text-align:left;\"> City </th>\n   <th style=\"text-align:right;\"> avg_wage </th>\n   <th style=\"text-align:right;\"> deposite </th>\n   <th style=\"text-align:right;\"> FAI </th>\n   <th style=\"text-align:right;\"> Gov_Rev </th>\n   <th style=\"text-align:right;\"> Gov_Exp </th>\n   <th style=\"text-align:right;\"> GDP </th>\n   <th style=\"text-align:right;\"> GDPPC </th>\n   <th style=\"text-align:right;\"> GIO </th>\n   <th style=\"text-align:right;\"> Loan </th>\n   <th style=\"text-align:right;\"> NIPCR </th>\n   <th style=\"text-align:right;\"> Bed </th>\n   <th style=\"text-align:right;\"> Emp </th>\n   <th style=\"text-align:right;\"> EmpR </th>\n   <th style=\"text-align:right;\"> EmpRT </th>\n   <th style=\"text-align:right;\"> Pri_Stu </th>\n   <th style=\"text-align:right;\"> Sec_Stu </th>\n   <th style=\"text-align:right;\"> Household </th>\n   <th style=\"text-align:right;\"> Household_R </th>\n   <th style=\"text-align:right;\"> NOIP </th>\n   <th style=\"text-align:right;\"> Pop_R </th>\n   <th style=\"text-align:right;\"> RSCG </th>\n   <th style=\"text-align:right;\"> Pop_T </th>\n   <th style=\"text-align:right;\"> Agri </th>\n   <th style=\"text-align:right;\"> Service </th>\n   <th style=\"text-align:right;\"> Disp_Inc </th>\n   <th style=\"text-align:right;\"> RORP </th>\n   <th style=\"text-align:right;\"> ROREmp </th>\n  </tr>\n </thead>\n<tbody>\n  <tr>\n   <td style=\"text-align:left;\"> Anhua </td>\n   <td style=\"text-align:left;\"> Yiyang </td>\n   <td style=\"text-align:right;\"> 30544 </td>\n   <td style=\"text-align:right;\"> 10967.0 </td>\n   <td style=\"text-align:right;\"> 6831.7 </td>\n   <td style=\"text-align:right;\"> 456.72 </td>\n   <td style=\"text-align:right;\"> 2703.0 </td>\n   <td style=\"text-align:right;\"> 13225.0 </td>\n   <td style=\"text-align:right;\"> 14567 </td>\n   <td style=\"text-align:right;\"> 9276.9 </td>\n   <td style=\"text-align:right;\"> 3954.9 </td>\n   <td style=\"text-align:right;\"> 3528.3 </td>\n   <td style=\"text-align:right;\"> 2718 </td>\n   <td style=\"text-align:right;\"> 494.31 </td>\n   <td style=\"text-align:right;\"> 441.4 </td>\n   <td style=\"text-align:right;\"> 338.0 </td>\n   <td style=\"text-align:right;\"> 54.175 </td>\n   <td style=\"text-align:right;\"> 32.830 </td>\n   <td style=\"text-align:right;\"> 290.4 </td>\n   <td style=\"text-align:right;\"> 234.5 </td>\n   <td style=\"text-align:right;\"> 101 </td>\n   <td style=\"text-align:right;\"> 670.3 </td>\n   <td style=\"text-align:right;\"> 5760.60 </td>\n   <td style=\"text-align:right;\"> 910.8 </td>\n   <td style=\"text-align:right;\"> 4942.253 </td>\n   <td style=\"text-align:right;\"> 5414.5 </td>\n   <td style=\"text-align:right;\"> 12373 </td>\n   <td style=\"text-align:right;\"> 0.7359464 </td>\n   <td style=\"text-align:right;\"> 0.8929619 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Anren </td>\n   <td style=\"text-align:left;\"> Chenzhou </td>\n   <td style=\"text-align:right;\"> 28058 </td>\n   <td style=\"text-align:right;\"> 4598.9 </td>\n   <td style=\"text-align:right;\"> 6386.1 </td>\n   <td style=\"text-align:right;\"> 220.57 </td>\n   <td style=\"text-align:right;\"> 1454.7 </td>\n   <td style=\"text-align:right;\"> 4941.2 </td>\n   <td style=\"text-align:right;\"> 12761 </td>\n   <td style=\"text-align:right;\"> 4189.2 </td>\n   <td style=\"text-align:right;\"> 2555.3 </td>\n   <td style=\"text-align:right;\"> 3271.8 </td>\n   <td style=\"text-align:right;\"> 970 </td>\n   <td style=\"text-align:right;\"> 290.82 </td>\n   <td style=\"text-align:right;\"> 255.4 </td>\n   <td style=\"text-align:right;\"> 99.4 </td>\n   <td style=\"text-align:right;\"> 33.171 </td>\n   <td style=\"text-align:right;\"> 17.505 </td>\n   <td style=\"text-align:right;\"> 104.6 </td>\n   <td style=\"text-align:right;\"> 121.9 </td>\n   <td style=\"text-align:right;\"> 34 </td>\n   <td style=\"text-align:right;\"> 243.2 </td>\n   <td style=\"text-align:right;\"> 2386.40 </td>\n   <td style=\"text-align:right;\"> 388.7 </td>\n   <td style=\"text-align:right;\"> 2357.764 </td>\n   <td style=\"text-align:right;\"> 3814.1 </td>\n   <td style=\"text-align:right;\"> 16072 </td>\n   <td style=\"text-align:right;\"> 0.6256753 </td>\n   <td style=\"text-align:right;\"> 0.8782065 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Anxiang </td>\n   <td style=\"text-align:left;\"> Changde </td>\n   <td style=\"text-align:right;\"> 31935 </td>\n   <td style=\"text-align:right;\"> 5517.2 </td>\n   <td style=\"text-align:right;\"> 3541.0 </td>\n   <td style=\"text-align:right;\"> 243.64 </td>\n   <td style=\"text-align:right;\"> 1779.5 </td>\n   <td style=\"text-align:right;\"> 12482.0 </td>\n   <td style=\"text-align:right;\"> 23667 </td>\n   <td style=\"text-align:right;\"> 5108.9 </td>\n   <td style=\"text-align:right;\"> 2806.9 </td>\n   <td style=\"text-align:right;\"> 7693.7 </td>\n   <td style=\"text-align:right;\"> 1931 </td>\n   <td style=\"text-align:right;\"> 336.39 </td>\n   <td style=\"text-align:right;\"> 270.5 </td>\n   <td style=\"text-align:right;\"> 205.9 </td>\n   <td style=\"text-align:right;\"> 19.584 </td>\n   <td style=\"text-align:right;\"> 17.819 </td>\n   <td style=\"text-align:right;\"> 148.1 </td>\n   <td style=\"text-align:right;\"> 135.4 </td>\n   <td style=\"text-align:right;\"> 53 </td>\n   <td style=\"text-align:right;\"> 346.0 </td>\n   <td style=\"text-align:right;\"> 3957.90 </td>\n   <td style=\"text-align:right;\"> 528.3 </td>\n   <td style=\"text-align:right;\"> 4524.410 </td>\n   <td style=\"text-align:right;\"> 14100.0 </td>\n   <td style=\"text-align:right;\"> 16610 </td>\n   <td style=\"text-align:right;\"> 0.6549309 </td>\n   <td style=\"text-align:right;\"> 0.8041262 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Baojing </td>\n   <td style=\"text-align:left;\"> Hunan West </td>\n   <td style=\"text-align:right;\"> 30843 </td>\n   <td style=\"text-align:right;\"> 2250.0 </td>\n   <td style=\"text-align:right;\"> 1005.4 </td>\n   <td style=\"text-align:right;\"> 192.59 </td>\n   <td style=\"text-align:right;\"> 1379.1 </td>\n   <td style=\"text-align:right;\"> 4087.9 </td>\n   <td style=\"text-align:right;\"> 14563 </td>\n   <td style=\"text-align:right;\"> 3623.5 </td>\n   <td style=\"text-align:right;\"> 1253.7 </td>\n   <td style=\"text-align:right;\"> 4191.3 </td>\n   <td style=\"text-align:right;\"> 927 </td>\n   <td style=\"text-align:right;\"> 195.17 </td>\n   <td style=\"text-align:right;\"> 145.6 </td>\n   <td style=\"text-align:right;\"> 116.4 </td>\n   <td style=\"text-align:right;\"> 19.249 </td>\n   <td style=\"text-align:right;\"> 11.831 </td>\n   <td style=\"text-align:right;\"> 73.2 </td>\n   <td style=\"text-align:right;\"> 69.9 </td>\n   <td style=\"text-align:right;\"> 18 </td>\n   <td style=\"text-align:right;\"> 184.1 </td>\n   <td style=\"text-align:right;\"> 768.04 </td>\n   <td style=\"text-align:right;\"> 281.3 </td>\n   <td style=\"text-align:right;\"> 1118.561 </td>\n   <td style=\"text-align:right;\"> 541.8 </td>\n   <td style=\"text-align:right;\"> 13455 </td>\n   <td style=\"text-align:right;\"> 0.6544614 </td>\n   <td style=\"text-align:right;\"> 0.7460163 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Chaling </td>\n   <td style=\"text-align:left;\"> Zhuzhou </td>\n   <td style=\"text-align:right;\"> 31251 </td>\n   <td style=\"text-align:right;\"> 8241.4 </td>\n   <td style=\"text-align:right;\"> 6508.4 </td>\n   <td style=\"text-align:right;\"> 620.19 </td>\n   <td style=\"text-align:right;\"> 1947.0 </td>\n   <td style=\"text-align:right;\"> 11585.0 </td>\n   <td style=\"text-align:right;\"> 20078 </td>\n   <td style=\"text-align:right;\"> 9157.7 </td>\n   <td style=\"text-align:right;\"> 4287.4 </td>\n   <td style=\"text-align:right;\"> 3887.7 </td>\n   <td style=\"text-align:right;\"> 1449 </td>\n   <td style=\"text-align:right;\"> 330.29 </td>\n   <td style=\"text-align:right;\"> 299.0 </td>\n   <td style=\"text-align:right;\"> 154.0 </td>\n   <td style=\"text-align:right;\"> 33.906 </td>\n   <td style=\"text-align:right;\"> 20.548 </td>\n   <td style=\"text-align:right;\"> 148.7 </td>\n   <td style=\"text-align:right;\"> 139.4 </td>\n   <td style=\"text-align:right;\"> 106 </td>\n   <td style=\"text-align:right;\"> 301.6 </td>\n   <td style=\"text-align:right;\"> 4009.50 </td>\n   <td style=\"text-align:right;\"> 578.4 </td>\n   <td style=\"text-align:right;\"> 3793.550 </td>\n   <td style=\"text-align:right;\"> 5444.0 </td>\n   <td style=\"text-align:right;\"> 20461 </td>\n   <td style=\"text-align:right;\"> 0.5214385 </td>\n   <td style=\"text-align:right;\"> 0.9052651 </td>\n  </tr>\n</tbody>\n</table>\n\n`````\n:::\n:::\n\n\nJoin the attribute data to the geospatial data using `left_join`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhunan <- left_join(x=hunan,\n                   y=econ,\n                   by=\"County\")\n```\n:::\n\n\n### Visualising GDP Per Capita\n\nFirst, let's visualise GDP per capita of the different counties in Hunan province using a choropleth map.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nequal <- tm_shape(hunan) +\n  tm_fill(\"GDPPC\",\n          n=5,\n          style=\"equal\") +\n  tm_borders(alpha = 0.5) +\n  tm_layout(main.title = \"Equal interval\")\n\nquantile <- tm_shape(hunan) +\n  tm_fill(\"GDPPC\",\n          n=5,\n          style=\"quantile\") +\n  tm_borders(alpha = 0.5) +\n  tm_layout(main.title = \"Quantile\")\n\ntmap_arrange(equal, \n             quantile, \n             asp=1, \n             ncol=2)\n```\n\n::: {.cell-output-display}\n![](Hands-on_EX02_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n\n## Global Spatial Autocorrelation\n\nTo compute global spatial autocorrelation, we first need to compute a spatial weight matrix. The `poly2nb()` function from the `spdep` package is used to compute a contiguity matrix using the queen's method. This gives a basic weight matrix to indicate if areas are contiguous with each other.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwm_q <- poly2nb(hunan, \n                queen=TRUE)\nsummary(wm_q)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \nLink number distribution:\n\n 1  2  3  4  5  6  7  8  9 11 \n 2  2 12 16 24 14 11  4  2  1 \n2 least connected regions:\n30 65 with 1 link\n1 most connected region:\n85 with 11 links\n```\n:::\n:::\n\n\nContiguity matrices are typically not used in raw form. The matrix is often row standardised by dividing each value by the sum of neighbours in a row such that each neighbour of an area applies an equal weightage. Each row will sum up to 1 (all rows are equal).\n\nThe function used is the nb2listw(). The options for style are :\n\n-   \"W\" row standardised (each row sums to 1)\n\n-   \"B\" binary\n\n-   \"C\" globally standardised (weight = total no of areas/total links)\n\n-   \"U\" unequal (all weights sum to 1)\n\n-   \"minmax\" standardised by minimum and maximum of row\n\n-   \"S\" variance standardised\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrswm_q <- nb2listw(wm_q, \n                   style=\"W\", \n                   zero.policy = TRUE)\nrswm_q\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \n\nWeights style: W \nWeights constants summary:\n   n   nn S0       S1       S2\nW 88 7744 88 37.86334 365.9147\n```\n:::\n:::\n\n\n### Moran's I\n\nNow we can finally conduct the Moran's I test with the `moran.test()` function from `spdep`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmoran.test(hunan$GDPPC,\n           rswm_q,\n           zero.policy = TRUE,\n           na.action=na.omit)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\n\tMoran I test under randomisation\n\ndata:  hunan$GDPPC  \nweights: rswm_q    \n\nMoran I statistic standard deviate = 4.7351, p-value = 1.095e-06\nalternative hypothesis: greater\nsample estimates:\nMoran I statistic       Expectation          Variance \n      0.300749970      -0.011494253       0.004348351 \n```\n:::\n:::\n\n\nThe null hypothesis of the Moran's I test is that the data is randomly distributed (ie Moran's I=0). In the above example, the null hypothesis is that the data is clustered (ie Moran's I\\>0). At 5% significance level, we reject the null hypothesis and accept the alternative hypothesis that there is spatial clustering of GDP per capita. The computed Moran's I is 0.3, indicating that there is some degree of spatially clustering.\n\n### Monte Carlo Moran's I\n\nThe Moran's I test assumes that the variable follows a normal distribution and is a random sample. When we are unsure of the underlying assumption of the variable, we can use Monte Carlo Moran's I test instead. This test involves repeated random sampling from the dataset to estimate the distribution of Moran's I if the variable were a random distributed across space, then compares the computed Moran's I from the full dataset to this distribution.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed=1234\n\nbperm <- moran.mc(hunan$GDPPC,\n                  rswm_q,\n                  nsim=999,\n                  zero.policy=TRUE,\n                  na.action=na.omit)\n\nbperm\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\n\tMonte-Carlo simulation of Moran I\n\ndata:  hunan$GDPPC \nweights: rswm_q  \nnumber of simulations + 1: 1000 \n\nstatistic = 0.30075, observed rank = 1000, p-value = 0.001\nalternative hypothesis: greater\n```\n:::\n:::\n\n\nThe null hypothesis of the Moran's I test is that the data is randomly distributed or perfectly dispersed (ie Moran's I\\<=0). In the above example, the null hypothesis is that the data is clustered (ie Moran's I\\>0). At 5% significance level, we reject the null hypothesis and accept the alternative hypothesis that there is spatial clustering of GDP per capita. The computed Moran's I is 0.3, indicating that there is some degree of spatially clustering.\n\nWe can use the simulated data to plot the probability distribution of Moran's I.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmcdata <- as_tibble(bperm$res)\n\nggplot(data=mcdata) +\n  geom_histogram(aes(x=value), \n                 colour=\"black\",\n                 fill=\"light blue\", bins=30) +\n  geom_vline(xintercept=0,\n             colour=\"black\",\n             linetype=\"dashed\") +\n  geom_vline(xintercept=mean(mcdata$value),\n             colour=\"red\") +\n  annotate(geom = \"text\",\n           label=paste0(\"mean =\\n\",\n                        signif(mean(mcdata$value), 3)),\n           x=-0.043,\n           y=139) +\n  ylim(0, 150) +\n  labs(title=\"Simulated Moran's I\",\n       x=\"Simulated Moran's I\", \n       y=\"Frequency\") +\n  theme_bw()\n```\n\n::: {.cell-output-display}\n![](Hands-on_EX02_files/figure-html/unnamed-chunk-14-1.png){width=672}\n:::\n:::\n\n\nThis is the sampling distribution of Moran's I, which is approximately a normal distribution. The null hypothesis is the Moran's I \\<=0 (although the sample mean is actually slightly less than 0). If the null hypothesis is true, it is unlikely to get values more than 0. From the distribution, we can see that it is unlikely to get the computed Moran's I of 0.3 if the null hypothesis hold true. As such, we can reject the null hypothesis and conclude that there is clustering observed in the GDP per capita in Hunan.\n\n### Geary's C Test\n\nGeary's C test is another method to measure spatial autocorrelation. The `geary.test()` function from the `spdep` package is used to perform this test. The Geary C test statistic lies between 0 and 3 with 0 meaning perfect clustering, 1 meaning random distribution and 3 meaning perfect dispersion.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngeary.test(hunan$GDPPC, \n           listw=rswm_q)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\n\tGeary C test under randomisation\n\ndata:  hunan$GDPPC \nweights: rswm_q \n\nGeary C statistic standard deviate = 3.6108, p-value = 0.0001526\nalternative hypothesis: Expectation greater than statistic\nsample estimates:\nGeary C statistic       Expectation          Variance \n        0.6907223         1.0000000         0.0073364 \n```\n:::\n:::\n\n\nThe null hypothesis is that Geary's C \\>=1 (randomly distributed or perfected dispersed). At 5% significance level, we can reject the null hypothesis and conclude that C \\<1. The value of 0.69 indicates that GDP per capita is spatially clustered.\n\n### Spatial Correlogram\n\nA spatial correlogram can be used to visualise patterns of spatial autocorrelation with increasing lags (distance). Logically, correlation should decrease with more lags. Increasing lags means that we are testing if further locations are correlated with an area. The y-axis is usually Moran's I or Geary's C.\n\nThe code chunk below generates a spatial correlogram using Moran's I. As the order of contiguity increases, GDP per capita is less correlated, which is to be expected.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nMI_corr <- sp.correlogram(wm_q, \n                          hunan$GDPPC, \n                          order=6, \n                          method=\"I\", \n                          style=\"W\")\nplot(MI_corr)\n```\n\n::: {.cell-output-display}\n![](Hands-on_EX02_files/figure-html/unnamed-chunk-16-1.png){width=672}\n:::\n:::\n\n\nWe can also view the detail test statistics to check significance of results.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nprint(MI_corr)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nSpatial correlogram for hunan$GDPPC \nmethod: Moran's I\n         estimate expectation   variance standard deviate Pr(I) two sided    \n1 (88)  0.3007500  -0.0114943  0.0043484           4.7351       2.189e-06 ***\n2 (88)  0.2060084  -0.0114943  0.0020962           4.7505       2.029e-06 ***\n3 (88)  0.0668273  -0.0114943  0.0014602           2.0496        0.040400 *  \n4 (88)  0.0299470  -0.0114943  0.0011717           1.2107        0.226015    \n5 (88) -0.1530471  -0.0114943  0.0012440          -4.0134       5.984e-05 ***\n6 (88) -0.1187070  -0.0114943  0.0016791          -2.6164        0.008886 ** \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n```\n:::\n:::\n\n\nThe code chunk below generates a spatial correlogram using Geary's C. As the order of contiguity increases, GDP per capita is less correlated.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nGC_corr <- sp.correlogram(wm_q, \n                          hunan$GDPPC, \n                          order=6, \n                          method=\"C\", \n                          style=\"W\")\nplot(GC_corr)\n```\n\n::: {.cell-output-display}\n![](Hands-on_EX02_files/figure-html/unnamed-chunk-18-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nprint(GC_corr)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nSpatial correlogram for hunan$GDPPC \nmethod: Geary's C\n        estimate expectation  variance standard deviate Pr(I) two sided    \n1 (88) 0.6907223   1.0000000 0.0073364          -3.6108       0.0003052 ***\n2 (88) 0.7630197   1.0000000 0.0049126          -3.3811       0.0007220 ***\n3 (88) 0.9397299   1.0000000 0.0049005          -0.8610       0.3892612    \n4 (88) 1.0098462   1.0000000 0.0039631           0.1564       0.8757128    \n5 (88) 1.2008204   1.0000000 0.0035568           3.3673       0.0007592 ***\n6 (88) 1.0773386   1.0000000 0.0058042           1.0151       0.3100407    \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n```\n:::\n:::\n\n\n## Local Spatial Autocorrelation\n\nLocal indicators spatial autocorrelation (LISA) are used to evaluate the existence of clusters and outliers in the spatial arrangement of a variable. The difference between global and local indicators of spatial autocorrelation is that local indicators are computed for each observation. Each value measures the extent of significant spatial clustering of similar values around that observation.\n\n### Local Moran's I\n\nLocal Moran's I can be computed using the `localmoran()` function. The first line of the code creates a list of the indices by alphabetical order of county name. It will be used later to order the local Moran's I test output.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfips <- order(hunan$County)\n\nlocalMI <- localmoran(hunan$GDPPC,\n                      rswm_q)\n\nhead(localMI)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n            Ii          E.Ii       Var.Ii        Z.Ii Pr(z != E(Ii))\n1 -0.001468468 -2.815006e-05 4.723841e-04 -0.06626904      0.9471636\n2  0.025878173 -6.061953e-04 1.016664e-02  0.26266425      0.7928094\n3 -0.011987646 -5.366648e-03 1.133362e-01 -0.01966705      0.9843090\n4  0.001022468 -2.404783e-07 5.105969e-06  0.45259801      0.6508382\n5  0.014814881 -6.829362e-05 1.449949e-03  0.39085814      0.6959021\n6 -0.038793829 -3.860263e-04 6.475559e-03 -0.47728835      0.6331568\n```\n:::\n:::\n\n\n`localmoran()` outputs the following:\n\n-   Ii: the local Moran's I statistics\n\n-   E.Ii: the expectation of local Moran statistic under the randomisation hypothesis\n\n-   Var.Ii: the variance of local Moran statistic under the randomisation hypothesis\n\n-   Z.Ii: the standard deviation of local Moran statistic\n\n-   Pr(): the p-value of local Moran statistic\n\nIn this case, the null hypotheses are that GDP per capita are randomly distributed around each area. The default is the two-sided test shown, but this can be adjusted in the arguments of the `localmoran()` function.\n\nThe following code chunk prints all the local Moran's I statistics:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nprintCoefmat(data.frame(localMI[fips,], \n                        row.names=hunan$County[fips]), \n             check.names=FALSE)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n                       Ii        E.Ii      Var.Ii        Z.Ii Pr.z....E.Ii..\nAnhua         -2.2493e-02 -5.0048e-03  5.8235e-02 -7.2467e-02         0.9422\nAnren         -3.9932e-01 -7.0111e-03  7.0348e-02 -1.4791e+00         0.1391\nAnxiang       -1.4685e-03 -2.8150e-05  4.7238e-04 -6.6269e-02         0.9472\nBaojing        3.4737e-01 -5.0089e-03  8.3636e-02  1.2185e+00         0.2230\nChaling        2.0559e-02 -9.6812e-04  2.7711e-02  1.2932e-01         0.8971\nChangning     -2.9868e-05 -9.0010e-09  1.5105e-07 -7.6828e-02         0.9388\nChangsha       4.9022e+00 -2.1348e-01  2.3194e+00  3.3590e+00         0.0008\nChengbu        7.3725e-01 -1.0534e-02  2.2132e-01  1.5895e+00         0.1119\nChenxi         1.4544e-01 -2.8156e-03  4.7116e-02  6.8299e-01         0.4946\nCili           7.3176e-02 -1.6747e-03  4.7902e-02  3.4200e-01         0.7324\nDao            2.1420e-01 -2.0824e-03  4.4123e-02  1.0297e+00         0.3032\nDongan         1.5210e-01 -6.3485e-04  1.3471e-02  1.3159e+00         0.1882\nDongkou        5.2918e-01 -6.4461e-03  1.0748e-01  1.6338e+00         0.1023\nFenghuang      1.8013e-01 -6.2832e-03  1.3257e-01  5.1198e-01         0.6087\nGuidong       -5.9160e-01 -1.3086e-02  3.7003e-01 -9.5104e-01         0.3416\nGuiyang        1.8240e-01 -3.6908e-03  3.2610e-02  1.0305e+00         0.3028\nGuzhang        2.8466e-01 -8.5054e-03  1.4152e-01  7.7931e-01         0.4358\nHanshou        2.5878e-02 -6.0620e-04  1.0167e-02  2.6266e-01         0.7928\nHengdong       9.9964e-03 -4.9063e-04  6.7742e-03  1.2742e-01         0.8986\nHengnan        2.8064e-02 -3.2160e-04  3.7597e-03  4.6294e-01         0.6434\nHengshan      -5.8201e-03 -3.0437e-05  5.1076e-04 -2.5618e-01         0.7978\nHengyang       6.2997e-02 -1.3046e-03  2.1865e-02  4.3486e-01         0.6637\nHongjiang      1.8790e-01 -2.3019e-03  3.1725e-02  1.0678e+00         0.2856\nHuarong       -1.5389e-02 -1.8667e-03  8.1030e-02 -4.7503e-02         0.9621\nHuayuan        8.3772e-02 -8.5569e-04  2.4495e-02  5.4072e-01         0.5887\nHuitong        2.5997e-01 -5.2447e-03  1.1077e-01  7.9685e-01         0.4255\nJiahe         -1.2431e-01 -3.0550e-03  5.1111e-02 -5.3633e-01         0.5917\nJianghua       2.8651e-01 -3.8280e-03  8.0968e-02  1.0204e+00         0.3076\nJiangyong      2.4337e-01 -2.7082e-03  1.1746e-01  7.1800e-01         0.4728\nJingzhou       1.8270e-01 -8.5106e-04  2.4363e-02  1.1759e+00         0.2396\nJinshi        -1.1988e-02 -5.3666e-03  1.1334e-01 -1.9667e-02         0.9843\nJishou        -2.8680e-01 -2.6305e-03  4.4028e-02 -1.3543e+00         0.1756\nLanshan        6.3334e-02 -9.6365e-04  2.0441e-02  4.4972e-01         0.6529\nLeiyang        1.1581e-02 -1.4948e-04  2.5082e-03  2.3422e-01         0.8148\nLengshuijiang -1.7903e+00 -8.2129e-02  2.1598e+00 -1.1623e+00         0.2451\nLi             1.0225e-03 -2.4048e-07  5.1060e-06  4.5260e-01         0.6508\nLianyuan      -1.4672e-01 -1.8983e-03  1.9145e-02 -1.0467e+00         0.2952\nLiling         1.3774e+00 -1.5097e-02  4.2601e-01  2.1335e+00         0.0329\nLinli          1.4815e-02 -6.8294e-05  1.4499e-03  3.9086e-01         0.6959\nLinwu         -2.4621e-03 -9.0703e-06  1.9258e-04 -1.7676e-01         0.8597\nLinxiang       6.5904e-02 -2.9028e-03  2.5470e-01  1.3634e-01         0.8916\nLiuyang        3.3688e+00 -7.7502e-02  1.5180e+00  2.7972e+00         0.0052\nLonghui        8.0801e-01 -1.1377e-02  1.5538e-01  2.0787e+00         0.0376\nLongshan       7.5663e-01 -1.1100e-02  3.1449e-01  1.3690e+00         0.1710\nLuxi           1.8177e-01 -2.4855e-03  3.4249e-02  9.9561e-01         0.3194\nMayang         2.1852e-01 -5.8773e-03  9.8049e-02  7.1663e-01         0.4736\nMiluo          1.8704e+00 -1.6927e-02  2.7925e-01  3.5715e+00         0.0004\nNan           -9.5789e-03 -4.9497e-04  6.8341e-03 -1.0988e-01         0.9125\nNingxiang      1.5607e+00 -7.3878e-02  8.0012e-01  1.8274e+00         0.0676\nNingyuan       2.0910e-01 -7.0884e-03  8.2306e-02  7.5356e-01         0.4511\nPingjiang     -9.8964e-01 -2.6457e-03  5.6027e-02 -4.1698e+00         0.0000\nQidong         1.1806e-01 -2.1207e-03  2.4747e-02  7.6396e-01         0.4449\nQiyang         6.1966e-02 -7.3374e-04  8.5743e-03  6.7712e-01         0.4983\nRucheng       -3.6992e-01 -8.8999e-03  2.5272e-01 -7.1814e-01         0.4727\nSangzhi        2.5053e-01 -4.9470e-03  6.8000e-02  9.7972e-01         0.3272\nShaodong      -3.2659e-02 -3.6592e-05  5.0546e-04 -1.4510e+00         0.1468\nShaoshan       2.1223e+00 -5.0227e-02  1.3668e+00  1.8583e+00         0.0631\nShaoyang       5.9499e-01 -1.1253e-02  1.3012e-01  1.6807e+00         0.0928\nShimen        -3.8794e-02 -3.8603e-04  6.4756e-03 -4.7729e-01         0.6332\nShuangfeng     9.2835e-03 -2.2867e-03  3.1516e-02  6.5174e-02         0.9480\nShuangpai      8.0591e-02 -3.1366e-04  8.9838e-03  8.5358e-01         0.3933\nSuining        3.7585e-01 -3.5933e-03  4.1870e-02  1.8544e+00         0.0637\nTaojiang      -2.5394e-01 -1.2395e-03  1.4477e-02 -2.1002e+00         0.0357\nTaoyuan        1.4729e-02 -1.2039e-04  8.5103e-04  5.0903e-01         0.6107\nTongdao        4.6482e-01 -6.9870e-03  1.9879e-01  1.0582e+00         0.2900\nWangcheng      4.4220e+00 -1.1067e-01  1.3596e+00  3.8873e+00         0.0001\nWugang         7.1003e-01 -7.8144e-03  1.0710e-01  2.1935e+00         0.0283\nXiangtan       2.4530e-01 -3.6457e-04  3.2319e-03  4.3213e+00         0.0000\nXiangxiang     2.6271e-01 -1.2703e-03  2.1290e-02  1.8092e+00         0.0704\nXiangyin       5.4525e-01 -4.7442e-03  7.9236e-02  1.9539e+00         0.0507\nXinhua         1.1810e-01 -6.2649e-03  8.6001e-02  4.2409e-01         0.6715\nXinhuang       1.5725e-01 -4.1820e-03  3.6648e-01  2.6667e-01         0.7897\nXinning        6.8928e-01 -9.6674e-03  2.0328e-01  1.5502e+00         0.1211\nXinshao        5.7578e-02 -8.5932e-03  1.1769e-01  1.9289e-01         0.8470\nXintian       -7.4050e-03 -5.1493e-03  1.0877e-01 -6.8395e-03         0.9945\nXupu           3.2406e-01 -5.7468e-03  5.7735e-02  1.3726e+00         0.1699\nYanling       -6.9021e-02 -5.9211e-04  9.9306e-03 -6.8667e-01         0.4923\nYizhang       -2.6844e-01 -2.2463e-03  4.7588e-02 -1.2202e+00         0.2224\nYongshun       6.3064e-01 -1.1350e-02  1.8830e-01  1.4795e+00         0.1390\nYongxing       4.3411e-01 -9.0735e-03  1.5088e-01  1.1409e+00         0.2539\nYou            7.8750e-02 -7.2728e-03  1.2116e-01  2.4714e-01         0.8048\nYuanjiang      2.0004e-04 -1.7760e-04  2.9798e-03  6.9181e-03         0.9945\nYuanling       8.7298e-03 -2.2981e-06  2.3221e-05  1.8121e+00         0.0700\nYueyang        4.1189e-02 -1.9768e-04  2.3113e-03  8.6085e-01         0.3893\nZhijiang       1.0476e-01 -7.8123e-04  1.3100e-02  9.2214e-01         0.3565\nZhongfang     -2.2685e-01 -2.1455e-03  3.5927e-02 -1.1855e+00         0.2358\nZhuzhou        3.2864e-01 -5.2432e-04  7.2391e-03  3.8688e+00         0.0001\nZixing        -7.6849e-01 -8.8210e-02  9.4057e-01 -7.0144e-01         0.4830\n```\n:::\n:::\n\n\n### Mapping Local Moran's I\n\nTo map the local Moran's I, first we need to join it to the spatial data.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhunan.localMI <- cbind(hunan,localMI) %>%\n  rename(Pr.Ii = Pr.z....E.Ii..)\n```\n:::\n\n\nNow, we can create the map.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlocalMI.map <- tm_shape(hunan.localMI) +\n  tm_fill(col = \"Ii\", \n          style=\"pretty\",\n          palette =\"RdBu\",\n          title=\"Local Moran Statistics\") +\n  tm_borders(alpha=0.5)\n\nlocalMI.map\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nVariable(s) \"Ii\" contains positive and negative values, so midpoint is set to 0. Set midpoint = NA to show the full spectrum of the color palette.\n```\n:::\n\n::: {.cell-output-display}\n![](Hands-on_EX02_files/figure-html/unnamed-chunk-23-1.png){width=672}\n:::\n:::\n\n\nThe map seems to indicate that there is a high degree of clustering in some of the north-eastern counties. Some counties have low local Moran's I, indicating that GDP per capita in surrounding counties are dispersed.\n\nHowever, this map alone is not enough to conclude if there is not is no clustering of values. We need the p-values as well to evaluate whether the local Moran's I statistic for each area is significant.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npvalue.map <- tm_shape(hunan.localMI) +\n  tm_fill(col = \"Pr.Ii\", \n          breaks=c(-Inf, 0.001, 0.01, 0.05, 0.1, Inf),\n          palette =\"-Blues\",\n          title=\"Local Moran's I p-values\") +\n  tm_borders(alpha=0.5)\n\ntmap_arrange(localMI.map, pvalue.map,\n             asp=1, ncol=2)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nVariable(s) \"Ii\" contains positive and negative values, so midpoint is set to 0. Set midpoint = NA to show the full spectrum of the color palette.\n```\n:::\n\n::: {.cell-output-display}\n![](Hands-on_EX02_files/figure-html/unnamed-chunk-24-1.png){width=672}\n:::\n:::\n\n\nUsing these 2 maps, we can conclude that there is indeed clustering in some of the north eastern counties. However, the Moran's I statistic of counties with high degree dispersion indicated in the first map were not significant and hence we cannot reject the null hypothesis that values were randomly.\n\n### Moran Scatterplot\n\nThe Moran scatterplot is an illustration of the relationship between the values of the chosen attribute at each location and the average value of the same attribute at neighboring locations. We can plot this using the `moran.plot()` function.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmoran.plot(hunan$GDPPC,\n           rswm_q,\n           labels=as.character(hunan$County),\n           xlab=\"GDP per capita\",\n           ylab=\"Spatially lagged GDP per capita\")\n```\n\n::: {.cell-output-display}\n![](Hands-on_EX02_files/figure-html/unnamed-chunk-25-1.png){width=672}\n:::\n:::\n\n\nThe scatterplot is split into 4 quadrants. The x-axis is the actual GDP per capita and the y-axis is the spatially lagged GDP per capita. A higher spatially lagged GDP per capita means the surrounding neighbours have high GDP per capita.\n\nUpper right: Contains observations with high spatially lagged and actual GDP per capita, indicating positive autocorrelation and clustering of high values.\n\nLower left: Contains low spatially lagged and actual GDP per capita, indicating positive autocorrelation and clustering of low values.\n\nUpper left: High spatially lagged GDP per capita and low actual GDP per capita, indicating negative autocorrelation. These observations are outliers with low GDP per capita among neighbours with high GDP per capita.\n\nLower right: Low spatially lagged GDP per capita and high actual GDP per capita, indicating negative autocorrelation. These observations are outliers with high GDP per capita among neighbours with low GDP per capita.\n\n![](images/scatterquad.png){width=\"900\"} This scatterplot still does not take into account whether the values are statistically significant so we still need to refine this further.\n\n### LISA Cluster Map\n\nFirst, we center GDP per capita and local Moran's I around their means. We can then assign each observation to a quadrant depending on whether it is above or below mean GDP per capita and above or below the mean Moran's I. We also create a quadrant 0 for observations that are not statistically significant. Note that the logical statement for quadrant 0 must be the first as we want it to be prioritised over the other criteria.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhunan.localMI <- hunan.localMI %>%\n  mutate(C_mI = Ii - mean(Ii)) %>%\n  mutate(DV = GDPPC- mean(GDPPC)) %>%\n  mutate(quadrant = case_when(\n    Pr.Ii >0.05 ~0,\n    DV>0 & C_mI>0 ~4, #high-high cluster\n    DV<0 & C_mI<0 ~2, #low-high outlier\n    DV<0 & C_mI>0 ~1, #low-low cluster\n    DV>0 & C_mI<0 ~3)) #high-low outlier\n```\n:::\n\n\nWe can now build the LISA map:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncolors <- c(\"#ffffff\", \"#2c7bb6\", \"#abd9e9\", \"#fdae61\", \"#d7191c\")\nclusters <- c(\"insignificant\", \"low-low\", \"low-high\", \"high-low\", \"high-high\")\n\nLISAmap <- tm_shape(hunan.localMI) +\n  tm_fill(col=\"quadrant\",\n          style=\"cat\",\n          palette = colors,\n          label = clusters,\n          popup.vars=c(\"\")) +\n  tm_view(set.zoom.limits=c(11,17))+\n  tm_borders(alpha=0.5) +\n  tm_layout(main.title = \"LISA Clustering\")\n\nLISAmap\n```\n\n::: {.cell-output-display}\n![](Hands-on_EX02_files/figure-html/unnamed-chunk-27-1.png){width=672}\n:::\n:::\n\n\nFor proper analysis, we should actual GDp per capita next to the LISA map.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntmap_arrange(quantile, LISAmap,\n             asp=1, ncol=2)\n```\n\n::: {.cell-output-display}\n![](Hands-on_EX02_files/figure-html/unnamed-chunk-28-1.png){width=672}\n:::\n:::\n\n\nFrom the maps, we can see that there is a cluster of high GDP per capita counties in the northeast. There are 2 outlier counties in the with low GDP per capita near this the high cluster. In the southeast, there is a cluster of low GDP per capita.\n\n### Hot Spot and Cold Spot Analysis\n\nLocal spatial statistics can also be used to detect hot spots and cold spots. One such measure is Getis and Ord's G-statistics. It examines neighbours within a defined proximity to identify where either high or low values clutser spatially.\n\nInstead of contiguous neighbours, it uses neighbours with a specified distance. As such, we need to find the centroids of each county to develop a distance spatial weight matrix. The following code chunk creates an object with longitude and latitudes extracted using the `st_centroid()` function.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlongitude <- map_dbl(hunan$geometry, ~st_centroid(.x)[[1]])\nlatitude <- map_dbl(hunan$geometry, ~st_centroid(.x)[[2]])\ncoords <- cbind(longitude, latitude)\n```\n:::\n\n\nNext, we need to determine the maximum distance to consider counties as neighbours in the spatial matrix. The following code chunk uses `knearneigh()` to find the k nearest neighbours to each centroid (k=1 by default) and stores the indices of the nearest neighbours as list k1. The second line of code uses `nbdists()` to find the distance between each pair of neighbours . `unlist()` is needed to extract the distances from the list object. Lastly, we get some summary statistics on distance to nearest neighbours.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nk1 <- knn2nb(knearneigh(coords))\nk1dists <- unlist(nbdists(k1, coords, longlat = TRUE))\nsummary(k1dists)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  24.79   32.57   38.01   39.07   44.52   61.79 \n```\n:::\n:::\n\n\nThe furtherest nearest neighbour is 61.79km away, so using this as the maximum distance will ensure that each county will have at least one neighbour.\n\nThe following code chunk creates a distance weight matrix (list of the the indices of neighbours within 62km radius of each centroid).\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwm_d62 <- dnearneigh(coords, 0, 62, longlat = TRUE)\nwm_d62\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 324 \nPercentage nonzero weights: 4.183884 \nAverage number of links: 3.681818 \n```\n:::\n:::\n\n\nThen, we convert the matrix to binary format with the `nb2listw()` function.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwm62_lw <- nb2listw(wm_d62, style = 'B')\nsummary(wm62_lw)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 324 \nPercentage nonzero weights: 4.183884 \nAverage number of links: 3.681818 \nLink number distribution:\n\n 1  2  3  4  5  6 \n 6 15 14 26 20  7 \n6 least connected regions:\n6 15 30 32 56 65 with 1 link\n7 most connected regions:\n21 28 35 45 50 52 82 with 6 links\n\nWeights style: B \nWeights constants summary:\n   n   nn  S0  S1   S2\nB 88 7744 324 648 5440\n```\n:::\n:::\n\n\n### Computing Gi Statistics\n\nThe localG() function is used to compute the G statistic of each county with respect to GDP per capita.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfips <- order(hunan$County)\ngi.fixed <- localG(hunan$GDPPC, wm62_lw)\ngi.fixed\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1]  0.436075843 -0.265505650 -0.073033665  0.413017033  0.273070579\n [6] -0.377510776  2.863898821  2.794350420  5.216125401  0.228236603\n[11]  0.951035346 -0.536334231  0.176761556  1.195564020 -0.033020610\n[16]  1.378081093 -0.585756761 -0.419680565  0.258805141  0.012056111\n[21] -0.145716531 -0.027158687 -0.318615290 -0.748946051 -0.961700582\n[26] -0.796851342 -1.033949773 -0.460979158 -0.885240161 -0.266671512\n[31] -0.886168613 -0.855476971 -0.922143185 -1.162328599  0.735582222\n[36] -0.003358489 -0.967459309 -1.259299080 -1.452256513 -1.540671121\n[41] -1.395011407 -1.681505286 -1.314110709 -0.767944457 -0.192889342\n[46]  2.720804542  1.809191360 -1.218469473 -0.511984469 -0.834546363\n[51] -0.908179070 -1.541081516 -1.192199867 -1.075080164 -1.631075961\n[56] -0.743472246  0.418842387  0.832943753 -0.710289083 -0.449718820\n[61] -0.493238743 -1.083386776  0.042979051  0.008596093  0.136337469\n[66]  2.203411744  2.690329952  4.453703219 -0.340842743 -0.129318589\n[71]  0.737806634 -1.246912658  0.666667559  1.088613505 -0.985792573\n[76]  1.233609606 -0.487196415  1.626174042 -1.060416797  0.425361422\n[81] -0.837897118 -0.314565243  0.371456331  4.424392623 -0.109566928\n[86]  1.364597995 -1.029658605 -0.718000620\nattr(,\"cluster\")\n [1] Low  Low  High High High High High High High Low  Low  High Low  Low  Low \n[16] High High High High Low  High High Low  Low  High Low  Low  Low  Low  Low \n[31] Low  Low  Low  High Low  Low  Low  Low  Low  Low  High Low  Low  Low  Low \n[46] High High Low  Low  Low  Low  High Low  Low  Low  Low  Low  High Low  Low \n[61] Low  Low  Low  High High High Low  High Low  Low  High Low  High High Low \n[76] High Low  Low  Low  Low  Low  Low  High High Low  High Low  Low \nLevels: Low High\nattr(,\"gstari\")\n[1] FALSE\nattr(,\"call\")\nlocalG(x = hunan$GDPPC, listw = wm62_lw)\nattr(,\"class\")\n[1] \"localG\"\n```\n:::\n:::\n\n\nIt outputs a list of the G statistic for each county (in terms of a z-value). High positive values indicate the posibility of a local cluster of high values of the variable being analysed, very low relative values a similar cluster of low values.\n\nWe then join the G statistics to the base dataset.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhunan.gi <- cbind(hunan, as.matrix(gi.fixed)) %>%\n  rename(gstat_fixed = as.matrix.gi.fixed.)\n```\n:::\n\n\n### Mapping Gi to Show Hot and Cold Spots\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngdppc <- qtm(hunan, \"GDPPC\")\n\nGimap <-tm_shape(hunan.gi) +\n  tm_fill(col = \"gstat_fixed\", \n          style = \"pretty\",\n          palette=\"-RdBu\",\n          title = \"local Gi\") +\n  tm_borders(alpha = 0.5)\n\ntmap_arrange(gdppc, Gimap, asp=1, ncol=2)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nVariable(s) \"gstat_fixed\" contains positive and negative values, so midpoint is set to 0. Set midpoint = NA to show the full spectrum of the color palette.\n```\n:::\n\n::: {.cell-output-display}\n![](Hands-on_EX02_files/figure-html/unnamed-chunk-35-1.png){width=672}\n:::\n:::\n\n\nWe can see that there is a hotspot of high GDP per capita in the northeast of Hunan province.\n\n### Gi with Adaptive Weighting\n\nThe previous section computed Gi using a fixed weighting scheme where the distance is fixed and the number of neighbours considered depends on density of neighbours. Another method to compute Gi is to use an adaptive weighting scheme that considers a fixed number of nearest neighbours. The size of the neighbourhood considered will depend on the density of points.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nk8 <- knn2nb(knearneigh(coords,\n                        k=8))\nk8\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 704 \nPercentage nonzero weights: 9.090909 \nAverage number of links: 8 \nNon-symmetric neighbours list\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nk8_lw <- nb2listw(k8, style = 'B')\nsummary(k8_lw)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 704 \nPercentage nonzero weights: 9.090909 \nAverage number of links: 8 \nNon-symmetric neighbours list\nLink number distribution:\n\n 8 \n88 \n88 least connected regions:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 with 8 links\n88 most connected regions:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 with 8 links\n\nWeights style: B \nWeights constants summary:\n   n   nn  S0   S1    S2\nB 88 7744 704 1300 23014\n```\n:::\n:::\n\n\nNow to recompute Gi using the new weights matrix and generate the new map.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfips <- order(hunan$County)\ngi.adaptive <- localG(hunan$GDPPC, k8_lw)\n\nhunan.gi <- cbind(hunan.gi, as.matrix(gi.adaptive)) %>%\n  rename(gstat_adaptive = as.matrix.gi.adaptive.)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ngdppc<- qtm(hunan, \"GDPPC\")\n\nGimap1 <- tm_shape(hunan.gi) + \n  tm_fill(col = \"gstat_fixed\", \n          style = \"pretty\", \n          palette=\"-RdBu\", \n          title = \"local Gi (Fixed)\") + \n  tm_borders(alpha = 0.5)\n\nGimap2 <- tm_shape(hunan.gi) + \n  tm_fill(col = \"gstat_adaptive\", \n          style = \"pretty\", \n          palette=\"-RdBu\", \n          title = \"local Gi (Adaptive)\") + \n  tm_borders(alpha = 0.5)\n\ntmap_arrange(gdppc, \n             Gimap1,\n             Gimap2,\n             asp=1, \n             ncol=3)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nSome legend labels were too wide. These labels have been resized to 0.47, 0.47, 0.47, 0.43. Increase legend.width (argument of tm_layout) to make the legend wider and therefore the labels larger.\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nVariable(s) \"gstat_fixed\" contains positive and negative values, so midpoint is set to 0. Set midpoint = NA to show the full spectrum of the color palette.\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nVariable(s) \"gstat_adaptive\" contains positive and negative values, so midpoint is set to 0. Set midpoint = NA to show the full spectrum of the color palette.\n```\n:::\n\n::: {.cell-output-display}\n![](Hands-on_EX02_files/figure-html/unnamed-chunk-39-1.png){width=672}\n:::\n:::\n\n\nUnder the adaptive weightage scheme, there are more non-zero links. We can infer that in general a larger neighbourhood is considered for each county. This is likely especially so for counties on the border. This could explain the additional hotspot on the northeastern border. There are also fewer coldspots compared to the fixed scheme.\n\n## References\n\n<https://gisgeography.com/spatial-autocorrelation-moran-i-gis/>\n\n<https://medium.com/locale-ai/spatial-autocorrelation-how-spatial-objects-affect-other-nearby-spatial-objects-e05fa7d43de8>\n\n<https://www.statology.org/morans-i/>\n\n<https://storymaps.arcgis.com/stories/5b26f25bb81a437b89003423505e2f71>\n",
    "supporting": [
      "Hands-on_EX02_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<script src=\"../site_libs/kePrint-0.0.1/kePrint.js\"></script>\r\n<link href=\"../site_libs/lightable-0.0.1/lightable.css\" rel=\"stylesheet\" />\r\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}