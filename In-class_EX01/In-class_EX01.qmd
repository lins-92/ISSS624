---
title: "In-Class Exercise 01"
editor: visual
---

# Spatial Weights and Applications

## 1. Setting Up

### Loading Packages

We will use the following packages:

-   `sf`: import geospatial datasets

-   `tidyverse`: manipulate aspatial data

-   `spdep`: compute spatial weights and autocorrelation

-   `tmap`: plot maps

```{r}
pacman::p_load(sf, spdep, tmap, tidyverse)
```

## Import data

This dataset contains the administrative boundaries of the Hunan province in China.

```{r}
hunan <- st_read(dsn = "data/geospatial", 
                 layer = "Hunan")
```

Next, we import the aspatial data containing some economic indicators of the counties within Hunan.

```{r}
hunan2012 <- read_csv("data/aspatial/Hunan_2012.csv")
```

Lastly, we join the aspatial data to the spatial data.

```{r}
hunan <- left_join(hunan,hunan2012)%>%
  select(1:4, 7, 15)
```

We can now visual GDP per capita for each county.

```{r}
basemap <- tm_shape(hunan) +
  tm_polygons() +
  tm_text("NAME_3", size=0.5)

gdppc <- qtm(hunan, "GDPPC")
tmap_arrange(basemap, gdppc, asp=1, ncol=2)
```

## 2. Contiguity Spatial Weights

The `poly2nb()` function of the `spdep` package cna be used to compute contiguity weight matrices.

### Queen Method

By setting `queen=TRUE`, the `poly2nb()` function will output the matrix using the queen method.

```{r}
wm_q <- poly2nb(hunan, queen=TRUE)
summary(wm_q)
```

We can view the complete weight matrix using str(). It displays the indices of neighbours.

```{r}
str(wm_q)
```

If we want to retrieve the GDP per capita of all neighbours of polygon 1, we can use the following code chunk. The first line store the indices of all neighbours of 1 by retrieving it from the nested list. The next line uses these indices to retrieve the values from the Hunan GDPPC variable by index.

```{r}
nb1 <- wm_q[[1]]
hunan$GDPPC[nb1]

```

### Rook Method

By changing queen=FALSE, the rook method will be used.

```{r}
wm_r <- poly2nb(hunan, queen=FALSE)
summary(wm_r)
```

Compared to the queen method, the rook method produces fewer nonzero links because the rook method is more restrictive than queen method.

### Row Standardised Weights Matrix

Row standardisation is applied to adjust the weights of each neighbour by the size of the neighbourhood. There are a few ways to perform row standardisation (see below). In the code chunk below, we use "W" where each neighbour is assigned the weight of 1/(#no of neighbours).

The function used is the nb2listw(). The options for style are :

-   "W" row standardised (each row sums to 1)

-   "B" binary

-   "C" globally standardised (weight = total no of areas/total links)

-   "U" unequal (all weights sum to 1)

-   "minmax" standardised by minimum and maximum of row

"S" variance standardised

```{r}
rswm_q <- nb2listw(wm_q, style="W", zero.policy = TRUE)
rswm_q
```

### Visualising Contiguity Weights

Spatial weights can be visualised using connectivity graphs. Since the Hunan dataset is in polygons, we need to extract their centroids to do visualisation.

The following code chunk uses `st_centroid()` to generate the latitude and longitude of each polygon centroid and store in vectors. Lastly, the vectors are combined into a single object.

```{r}
longitude <- map_dbl(hunan$geometry, ~st_centroid(.x)[[1]])
latitude <- map_dbl(hunan$geometry, ~st_centroid(.x)[[2]])
coords <- cbind(longitude, latitude)
```

Now we can plot the connectivity graph. The first line plots the polygons and the second line plots the connectivity matrix by from the connections in weight matrix and the location of the points in coords.

```{r}
plot(hunan$geometry, border="lightgrey")
plot(wm_q, coords, pch = 19, cex = 0.6, add = TRUE, col= "red")
title(main="Connectivity Graph (Queen)")
```

```{r}
plot(hunan$geometry, border="lightgrey")
plot(wm_r, coords, pch = 19, cex = 0.6, add = TRUE, col = "red")
title(main="Connectivity Graph (Rook)")
```

```{r}
par(mfrow=c(1,2))
plot(hunan$geometry, border="lightgrey")
plot(wm_q, coords, pch = 19, cex = 0.6, add = TRUE, col= "red")
title(main="Queen Contiguity")
plot(hunan$geometry, border="lightgrey")
plot(wm_r, coords, pch = 19, cex = 0.6, add = TRUE, col = "red")
title(main="Rook Contiguity")
```

## 3. Distance Spatial Weights

For distance weight matrices, the `dnearneigh()` function of the `spdep` package is used.

The function identifies neighbours of points by Euclidean distance within a specified distance band.

### Fixed Distance Weight Matrix

A fixed distance weight matrix considers any points within a certain fixed distance as a neighbour. To find this, we first need to set the upper limit for the distance band. We do this using the `knearneigh()` function by setting k=1 to generate a knn object. It is passed to the `knn2nb()` function to create a list of indices of the nearest neighbour to each centroid. We then use the nbdists() to compute the distance between each centroid and nearest neighbour.

```{r}
k1 <- knn2nb(knearneigh(coords))
k1dists <- unlist(nbdists(k1, coords, longlat = TRUE))
summary(k1dists)
```

From the summary, we see that the maximum distance between a centroid and its nearest neighbour centroid is 61.79km. If we set the maximum distance at 62km, all centroids will have at least one neighbour. The code chunk below creates a spatial matrix using 62km as the maximum distance.

```{r}
wm_d62 <- dnearneigh(coords, 0, 62, longlat = TRUE)
wm_d62
```

At maximum distance of 62km, the average number of neighbours is 3.68.

Now we can plot the connectivty graph:

```{r}
par(mfrow=c(1,2))
plot(hunan$geometry, border="lightgrey")
plot(k1, coords, add=TRUE, col="red", length=0.08)
title(main="1st nearest neighbours")
plot(hunan$geometry, border="lightgrey")
plot(wm_d62, coords, add=TRUE, pch = 19, cex = 0.6)
title(main="Distance link (62km)")
```

### Adaptive Distance Weight Matrix

The adaptive distance weight matrix is another way to build a distance weight matrix. Instead of using a fixed distance to find neighbours, it uses a fixed number of neighbours.

We use the `knearneigh()` function again but set the value of k at a larger number.

```{r}
knn6 <- knn2nb(knearneigh(coords, k=6))
knn6
```

We do not need the additional step of find the distance between neighbours since we have already fixed the number of neighbours. Nonetheless, we can use the following code to understand how the distance considered has changed between methods. Because some areas are more sparse or polygons are larger, the distance considered has naturally increased. The maximum distance considered is now 125km compared to 62km in the fixed distance method.

```{r}
k6dists <- unlist(nbdists(knn6, coords, longlat = TRUE))
summary(k6dists)
```

We can plot the adaptive distance weight matrix connectivity graph:

```{r}
plot(hunan$geometry, border="lightgrey")
plot(knn6, coords, pch = 19, cex = 0.6, add = TRUE, col = "red")
title(main="Adaptive distnace (k=6)")
```

### Inverse Distance Weight Matrix

The inverse distance matrix uses actual distance not just binary weights. It is inversed because weightage should decrease with distance.

We can compute distance between points using the `nbdists()` function. Note that we use the queen contiguity matrix here. Although distance is considered, the neighbourhood is still based on queen contiguity.

```{r}
dist <- nbdists(wm_q, coords, longlat = TRUE)
ids <- lapply(dist, function(x) 1/(x))
head(ids, 5)
```

### Row-Standardised Inverse Distance Weight Matrix

We can also apply row standardisation to the inverse distance weight matrix.

```{r}
rswm_ids <- nb2listw(wm_q, glist=ids, style="B", zero.policy=TRUE)
rswm_ids
```

The code below displays the weights that will be applied to the neighbours of polygon 1.

```{r}
rswm_ids$weights[1]
```

## Applying Spatial Weight Matrices

### Spatially Lagged Mean

Spatial weight matrices are typically used in computing spatially lagged values. Spatially lagged values can be used in spatial lag regression as an independent variable to account for the effect of a location's neighbours.

In the following code chunk, we use the row-standardised queen contiguity matrix to compute the average GDP per capita for each polygon's neighbours.

```{r}
GDPPC.lag <- lag.listw(rswm_q, hunan$GDPPC)
head(GDPPC.lag,5)
```

We join the spatially lagged mean GDP per capita values to the Hunan dataset below:

```{r}
lag.list <- list(hunan$NAME_3, lag.listw(rswm_q, hunan$GDPPC))
lag.res <- as.data.frame(lag.list)
colnames(lag.res) <- c("NAME_3", "lag GDPPC")
hunan <- left_join(hunan,lag.res)
```

Now we can plot the lagged GDP per capita.

```{r}
gdppc <- qtm(hunan, "GDPPC")
lag_gdppc <- qtm(hunan, "lag GDPPC")
tmap_arrange(gdppc, lag_gdppc, asp=1, ncol=2)
```

### Spatially Lagged Sum

The spatially lagged sum is just the sum of the neighbours values. This means that each neighbour has a weight of 1.

```{r}
b_weights <- lapply(wm_q, function(x) 0*x + 1)
b_weights2 <- nb2listw(wm_q, 
                       glist = b_weights, 
                       style = "B")
b_weights2
```

We can then add compute the spatially lagged sum and join it to the Hunan dataset for plotting.

```{r}
lag_sum <- list(hunan$NAME_3, lag.listw(b_weights2, hunan$GDPPC))
lag.res <- as.data.frame(lag_sum)
colnames(lag.res) <- c("NAME_3", "lag_sum GDPPC")
hunan <- left_join(hunan, lag.res)
```

```{r}
gdppc <- qtm(hunan, "GDPPC")
lag_sum_gdppc <- qtm(hunan, "lag_sum GDPPC")
tmap_arrange(gdppc, lag_sum_gdppc, asp=1, ncol=2)
```

### Spatial Window Average and Sum

The spatial window average and sum basically include the area itself, not only its neighbours. To do that, we need to change the diagonal values of the matrix to 1 using the `include_self()` function.

```{r}
wm_q1 <- nb2listw(include.self(wm_q))
wm_q1
```

```{r}
lag_w_avg_gpdpc <- lag.listw(wm_q1, 
                             hunan$GDPPC)
head(lag_w_avg_gpdpc)
```

Join the spatial window mean to the Hunan dataset and plot it.

```{r}
lag.list.wm_q1 <- list(hunan$NAME_3, lag.listw(wm_q1, hunan$GDPPC))
lag_wm_q1.res <- as.data.frame(lag.list.wm_q1)
colnames(lag_wm_q1.res) <- c("NAME_3", "lag_window_avg GDPPC")
hunan <- left_join(hunan, lag_wm_q1.res)
```

```{r}
gdppc <- qtm(hunan, "GDPPC")
w_avg_gdppc <- qtm(hunan, "lag_window_avg GDPPC")
tmap_arrange(gdppc, w_avg_gdppc, asp=1, ncol=2)
```

We can repeat the process to get spatial window sum.

```{r}
b_weights <- lapply(include.self(wm_q), 
                    function(x) 0*x + 1)
b_weights[1]
```

```{r}
b_weights2 <- nb2listw(include.self(wm_q), 
                       glist = b_weights, 
                       style = "B")
b_weights2
```

```{r}
w_sum_gdppc <- list(hunan$NAME_3, lag.listw(b_weights2, hunan$GDPPC))
w_sum_gdppc.res <- as.data.frame(w_sum_gdppc)
colnames(w_sum_gdppc.res) <- c("NAME_3", "w_sum GDPPC")
hunan <- left_join(hunan, w_sum_gdppc.res)
```

```{r}
gdppc <- qtm(hunan, "GDPPC")
w_sum_gdppc <- qtm(hunan, "w_sum GDPPC")
tmap_arrange(gdppc, w_sum_gdppc, asp=1, ncol=2)
```
