[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "ISSS624",
    "section": "",
    "text": "Welcome to my ISSS6224 Geospatial Analytics webpage! :)"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "1 + 1\n\n[1] 2"
  },
  {
    "objectID": "Hands-on_EX01.html",
    "href": "Hands-on_EX01.html",
    "title": "Hands-on Exercise 1",
    "section": "",
    "text": "The purpose of this exercise is to practice the basics of using geospatial data in R.\n\n\nsf is used to manipulate geospatial data and tidyverse for aspatial data. kableExtra makes tables with nicer formating.\n\n\n\n\n\nLet’s load the geospatial data.\n\nmpsz = st_read(dsn = \"Hands-on_EX01/data/geospatial\", \n               layer = \"MP14_SUBZONE_WEB_PL\")\n\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `D:\\lins-92\\ISSS624\\Hands-on_EX01\\data\\geospatial' using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n\ncyclingpath = st_read(dsn = \"Hands-on_EX01/data/geospatial\", \n                      layer = \"CyclingPath\")\n\nReading layer `CyclingPath' from data source \n  `D:\\lins-92\\ISSS624\\Hands-on_EX01\\data\\geospatial' using driver `ESRI Shapefile'\nSimple feature collection with 1625 features and 2 fields\nGeometry type: LINESTRING\nDimension:     XY\nBounding box:  xmin: 12711.19 ymin: 28711.33 xmax: 42626.09 ymax: 48948.15\nProjected CRS: SVY21\n\npreschool = st_read(\"Hands-on_EX01/data/geospatial/pre-schools-location-kml.kml\")\n\nReading layer `PRESCHOOLS_LOCATION' from data source \n  `D:\\lins-92\\ISSS624\\Hands-on_EX01\\data\\geospatial\\pre-schools-location-kml.kml' \n  using driver `KML'\nSimple feature collection with 1359 features and 2 fields\nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 103.6824 ymin: 1.248403 xmax: 103.9897 ymax: 1.462134\nz_range:       zmin: 0 zmax: 0\nGeodetic CRS:  WGS 84\n\n\nWe can see that each file has a different geometry type to represent different types of features.\nWe can also see that mpsz and cyclingpath both have the same projected CRS of SVY21 but preschools has a geodetic CRS of WGS 84. These refer to the coordinate systems to model geographic location and how to represent this information on a flat surface. Here is a detailed explanation on why coordinate systems are needed and the difference between a geodetic CRS (GCS) and projected CRS (PCS).\n\n\n\nThe st_geometry command displays the geometry information of a spatial dataset.\n\nst_geometry(mpsz)\n\nGeometry set for 323 features \nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\nFirst 5 geometries:\n\n\nMULTIPOLYGON (((31495.56 30140.01, 31980.96 296...\n\n\nMULTIPOLYGON (((29092.28 30021.89, 29119.64 300...\n\n\nMULTIPOLYGON (((29932.33 29879.12, 29947.32 298...\n\n\nMULTIPOLYGON (((27131.28 30059.73, 27088.33 297...\n\n\nMULTIPOLYGON (((26451.03 30396.46, 26440.47 303...\n\n\nWe can use glimpse to get an overview of the different variables in the dataset and head to view the first few entries.\n\nglimpse(mpsz)\n\nRows: 323\nColumns: 16\n$ OBJECTID   <int> 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, …\n$ SUBZONE_NO <int> 1, 1, 3, 8, 3, 7, 9, 2, 13, 7, 12, 6, 1, 5, 1, 1, 3, 2, 2, …\n$ SUBZONE_N  <chr> \"MARINA SOUTH\", \"PEARL'S HILL\", \"BOAT QUAY\", \"HENDERSON HIL…\n$ SUBZONE_C  <chr> \"MSSZ01\", \"OTSZ01\", \"SRSZ03\", \"BMSZ08\", \"BMSZ03\", \"BMSZ07\",…\n$ CA_IND     <chr> \"Y\", \"Y\", \"Y\", \"N\", \"N\", \"N\", \"N\", \"Y\", \"N\", \"N\", \"N\", \"N\",…\n$ PLN_AREA_N <chr> \"MARINA SOUTH\", \"OUTRAM\", \"SINGAPORE RIVER\", \"BUKIT MERAH\",…\n$ PLN_AREA_C <chr> \"MS\", \"OT\", \"SR\", \"BM\", \"BM\", \"BM\", \"BM\", \"SR\", \"QT\", \"QT\",…\n$ REGION_N   <chr> \"CENTRAL REGION\", \"CENTRAL REGION\", \"CENTRAL REGION\", \"CENT…\n$ REGION_C   <chr> \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\",…\n$ INC_CRC    <chr> \"5ED7EB253F99252E\", \"8C7149B9EB32EEFC\", \"C35FEFF02B13E0E5\",…\n$ FMEL_UPD_D <date> 2014-12-05, 2014-12-05, 2014-12-05, 2014-12-05, 2014-12-05…\n$ X_ADDR     <dbl> 31595.84, 28679.06, 29654.96, 26782.83, 26201.96, 25358.82,…\n$ Y_ADDR     <dbl> 29220.19, 29782.05, 29974.66, 29933.77, 30005.70, 29991.38,…\n$ SHAPE_Leng <dbl> 5267.381, 3506.107, 1740.926, 3313.625, 2825.594, 4428.913,…\n$ SHAPE_Area <dbl> 1630379.27, 559816.25, 160807.50, 595428.89, 387429.44, 103…\n$ geometry   <MULTIPOLYGON [m]> MULTIPOLYGON (((31495.56 30..., MULTIPOLYGON (…\n\n\n\nhead(mpsz, n=5) %>%\n  kable() %>%\n  kable_styling()\n\n\n\n \n  \n    OBJECTID \n    SUBZONE_NO \n    SUBZONE_N \n    SUBZONE_C \n    CA_IND \n    PLN_AREA_N \n    PLN_AREA_C \n    REGION_N \n    REGION_C \n    INC_CRC \n    FMEL_UPD_D \n    X_ADDR \n    Y_ADDR \n    SHAPE_Leng \n    SHAPE_Area \n    geometry \n  \n \n\n  \n    1 \n    1 \n    MARINA SOUTH \n    MSSZ01 \n    Y \n    MARINA SOUTH \n    MS \n    CENTRAL REGION \n    CR \n    5ED7EB253F99252E \n    2014-12-05 \n    31595.84 \n    29220.19 \n    5267.381 \n    1630379.3 \n    MULTIPOLYGON (((31495.56 30... \n  \n  \n    2 \n    1 \n    PEARL'S HILL \n    OTSZ01 \n    Y \n    OUTRAM \n    OT \n    CENTRAL REGION \n    CR \n    8C7149B9EB32EEFC \n    2014-12-05 \n    28679.06 \n    29782.05 \n    3506.107 \n    559816.2 \n    MULTIPOLYGON (((29092.28 30... \n  \n  \n    3 \n    3 \n    BOAT QUAY \n    SRSZ03 \n    Y \n    SINGAPORE RIVER \n    SR \n    CENTRAL REGION \n    CR \n    C35FEFF02B13E0E5 \n    2014-12-05 \n    29654.96 \n    29974.66 \n    1740.926 \n    160807.5 \n    MULTIPOLYGON (((29932.33 29... \n  \n  \n    4 \n    8 \n    HENDERSON HILL \n    BMSZ08 \n    N \n    BUKIT MERAH \n    BM \n    CENTRAL REGION \n    CR \n    3775D82C5DDBEFBD \n    2014-12-05 \n    26782.83 \n    29933.77 \n    3313.625 \n    595428.9 \n    MULTIPOLYGON (((27131.28 30... \n  \n  \n    5 \n    3 \n    REDHILL \n    BMSZ03 \n    N \n    BUKIT MERAH \n    BM \n    CENTRAL REGION \n    CR \n    85D9ABEF0A40678F \n    2014-12-05 \n    26201.96 \n    30005.70 \n    2825.594 \n    387429.4 \n    MULTIPOLYGON (((26451.03 30... \n  \n\n\n\n\n\nWe can also create simple plots of spatial data using the base R plot function. We can use indexing to indicate the variable to group by.\n\nplot(mpsz[\"CA_IND\"])\n\n\n\n\n\n\n\nThe st_crs displays the details of a spatial dataset’s projection. In this example, the EPSG code has been wrongly specified and needs to be corrected. The st_set_crs command only changes the code but does not actually change the coordinate system. It is only used to correcting wrongly specified projection information.\n\nst_crs(mpsz)\n\nCoordinate Reference System:\n  User input: SVY21 \n  wkt:\nPROJCRS[\"SVY21\",\n    BASEGEOGCRS[\"SVY21[WGS84]\",\n        DATUM[\"World Geodetic System 1984\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]],\n            ID[\"EPSG\",6326]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"Degree\",0.0174532925199433]]],\n    CONVERSION[\"unnamed\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"Degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"Degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"(E)\",east,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1,\n                ID[\"EPSG\",9001]]],\n        AXIS[\"(N)\",north,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1,\n                ID[\"EPSG\",9001]]]]\n\n\n\nmpsz <- st_set_crs(mpsz, 3414)\n\nWarning: st_crs<- : replacing crs does not reproject data; use st_transform for\nthat\n\n\nTo change the coordinate system (called transformation or projection), we use the the st_transform function. We will use this function to transform the preschool dataset to the same projection system as the other 2 layers (SVY21).\n\npreschool <- st_transform(preschool,\n                          crs=3414)\n\n\n\n\nSometimes we have datasets that have spatial information (e.g. latitude and longitude) that are not already in geospatal file formats (shp, gpkg, kml). We will need to import them as aspatial data first then specify which variables contain the geometries and how to represent these data spatially (ie. the coordinate system).\n\nlistings <- read_csv(\"Hands-on_EX01/data/aspatial/listings.csv\")\n\nRows: 4252 Columns: 16\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr   (5): name, host_name, neighbourhood_group, neighbourhood, room_type\ndbl  (10): id, host_id, latitude, longitude, price, minimum_nights, number_o...\ndate  (1): last_review\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\nglimpse(listings)\n\nRows: 4,252\nColumns: 16\n$ id                             <dbl> 50646, 71609, 71896, 71903, 275343, 275…\n$ name                           <chr> \"Pleasant Room along Bukit Timah\", \"Ens…\n$ host_id                        <dbl> 227796, 367042, 367042, 367042, 1439258…\n$ host_name                      <chr> \"Sujatha\", \"Belinda\", \"Belinda\", \"Belin…\n$ neighbourhood_group            <chr> \"Central Region\", \"East Region\", \"East …\n$ neighbourhood                  <chr> \"Bukit Timah\", \"Tampines\", \"Tampines\", …\n$ latitude                       <dbl> 1.33432, 1.34537, 1.34754, 1.34531, 1.2…\n$ longitude                      <dbl> 103.7852, 103.9589, 103.9596, 103.9610,…\n$ room_type                      <chr> \"Private room\", \"Private room\", \"Privat…\n$ price                          <dbl> 80, 178, 81, 81, 52, 40, 72, 41, 49, 49…\n$ minimum_nights                 <dbl> 90, 90, 90, 90, 14, 14, 90, 8, 14, 14, …\n$ number_of_reviews              <dbl> 18, 20, 24, 48, 20, 13, 133, 105, 14, 1…\n$ last_review                    <date> 2014-07-08, 2019-12-28, 2014-12-10, 20…\n$ reviews_per_month              <dbl> 0.22, 0.28, 0.33, 0.67, 0.20, 0.16, 1.2…\n$ calculated_host_listings_count <dbl> 1, 4, 4, 4, 50, 50, 7, 1, 50, 50, 50, 4…\n$ availability_365               <dbl> 365, 365, 365, 365, 353, 364, 365, 90, …\n\n\nFrom the glimpse, we can see that the latitude and longitude variables contain the spatial information we need. The units used are decimal degrees.\nNow let’s use the st_as_sf function to transform the listings dataset into geospatial data. Use the coords argument to specify the x and y coordinates (longitude then latitude) respectively. We assume that the original coordinate system was WGS84 (EPSG 4326) and reproject it to SVY21 (EPSG 3414).\n\nlistings_sf <- st_as_sf(listings,\n                        coords = c(\"longitude\", \"latitude\"),\n                        crs = 4326) %>%\n  st_transform(crs=3414)\n\n\n\n\n\n\n\nBuffers create a zone around a feature. It is used in geospatial analyses in conjunction with other functions to measure access to amenities (e.g. how many households are within 500m proximity to an MRT station?). The function is st_buffer.\nIn this example, we want to calculate the area of land that needs to be set aside for to 5m wide cycling paths.. The original cycling path layer is a polyline dataset which has no width so we need to use create a buffer first then calculate area using the st_area function.\n\nbuffer_cycling <- st_buffer(cyclingpath, \n                            dist=5, nQuadSegs = 30)\n\nbuffer_cycling$area = st_area(buffer_cycling)\n\nsum(buffer_cycling$area)\n\n773143.9 [m^2]\n\n\n\n\n\nCounting the number of points (features) in a polygon is another common geoprocessing tool. We use the st_intersects function to relate the point and polygon layers spatially. It will output a list of points located within each polygon (by their respective indices). The lengths function from base R is used to find the number of elements (ie pre-schools) in each polygon.\nIn this example, we will count the number of pre-schools in each subzone.\n\nmpsz <- mpsz %>%\n  mutate(preschools = lengths(st_intersects(x=mpsz,y=preschool)))\n\nplot(mpsz[\"preschools\"])"
  },
  {
    "objectID": "Hands-on_EX01.html#importing-and-preparing-data-1",
    "href": "Hands-on_EX01.html#importing-and-preparing-data-1",
    "title": "Hands-on Exercise 1",
    "section": "Importing and Preparing Data",
    "text": "Importing and Preparing Data\n\nLoading and Manipulating Data\nThis exercise uses the mpsz dataset from Part 1 and a new attribute dataset containing population data by subzone.\n\npopdata <- read_csv(\"Hands-on_EX01/data/aspatial/respopagesextod2011to2020.csv\")\n\nRows: 984656 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (5): PA, SZ, AG, Sex, TOD\ndbl (2): Pop, Time\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\nglimpse(popdata)\n\nRows: 984,656\nColumns: 7\n$ PA   <chr> \"Ang Mo Kio\", \"Ang Mo Kio\", \"Ang Mo Kio\", \"Ang Mo Kio\", \"Ang Mo K…\n$ SZ   <chr> \"Ang Mo Kio Town Centre\", \"Ang Mo Kio Town Centre\", \"Ang Mo Kio T…\n$ AG   <chr> \"0_to_4\", \"0_to_4\", \"0_to_4\", \"0_to_4\", \"0_to_4\", \"0_to_4\", \"0_to…\n$ Sex  <chr> \"Males\", \"Males\", \"Males\", \"Males\", \"Males\", \"Males\", \"Males\", \"M…\n$ TOD  <chr> \"HDB 1- and 2-Room Flats\", \"HDB 3-Room Flats\", \"HDB 4-Room Flats\"…\n$ Pop  <dbl> 0, 10, 30, 50, 0, 0, 40, 0, 0, 10, 30, 60, 0, 0, 40, 0, 0, 10, 30…\n$ Time <dbl> 2011, 2011, 2011, 2011, 2011, 2011, 2011, 2011, 2011, 2011, 2011,…\n\n\n\nhead(popdata, n=5) %>%\n  kable() %>%\n  kable_styling()\n\n\n\n \n  \n    PA \n    SZ \n    AG \n    Sex \n    TOD \n    Pop \n    Time \n  \n \n\n  \n    Ang Mo Kio \n    Ang Mo Kio Town Centre \n    0_to_4 \n    Males \n    HDB 1- and 2-Room Flats \n    0 \n    2011 \n  \n  \n    Ang Mo Kio \n    Ang Mo Kio Town Centre \n    0_to_4 \n    Males \n    HDB 3-Room Flats \n    10 \n    2011 \n  \n  \n    Ang Mo Kio \n    Ang Mo Kio Town Centre \n    0_to_4 \n    Males \n    HDB 4-Room Flats \n    30 \n    2011 \n  \n  \n    Ang Mo Kio \n    Ang Mo Kio Town Centre \n    0_to_4 \n    Males \n    HDB 5-Room and Executive Flats \n    50 \n    2011 \n  \n  \n    Ang Mo Kio \n    Ang Mo Kio Town Centre \n    0_to_4 \n    Males \n    HUDC Flats (excluding those privatised) \n    0 \n    2011 \n  \n\n\n\n\n\nFor this exercise, we will only be using the 2020 data. We need to relate the attribute data to the mpsz dataset. First, we need to manipulate the attribute data to create the following variables:\n\nYOUNG: age group 0 to 4 until age group 20 to 24\nECONOMYACTIVE: age group 25-29 until age group 60-64\nAGED: age group 65 and above\nTOTAL: all age group\nDEPENDENCY: the ratio between young and aged against economy active group\n\n\npop2020 <- popdata %>%\n  filter(Time==2020) %>%\n  group_by(PA, SZ, AG) %>%\n  summarise(POP = sum(Pop)) %>%\n  ungroup() %>%\n  pivot_wider(names_from = AG, \n              values_from = POP) %>%\n  mutate(YOUNG = rowSums(.[3:6])+ rowSums(.[12])) %>%\n  mutate(ECONOMYACTIVE = rowSums(.[7:11]) + rowSums(.[13:15])) %>%\n  mutate(AGED=rowSums(.[16:21])) %>%\n  mutate(TOTAL=rowSums(.[3:21])) %>%  \n  mutate(DEPENDENCY = (YOUNG + AGED)/ ECONOMYACTIVE) %>%\n  select(PA, SZ, YOUNG, ECONOMYACTIVE, AGED, TOTAL, DEPENDENCY) %>%\n  mutate(across(PA:SZ, toupper))\n\n`summarise()` has grouped output by 'PA', 'SZ'. You can override using the\n`.groups` argument.\n\n\nJoin the attribute data to the mpsz data by SZ. In the previous step, we manipulated this variable to be uppercase to match with the mpsz file.\n\nmpsz_pop2020 <- left_join(x=mpsz,\n                          y=pop2020,\n                          by= c(\"SUBZONE_N\" = \"SZ\"))"
  },
  {
    "objectID": "Hands-on_EX01.html#choropleth-maps",
    "href": "Hands-on_EX01.html#choropleth-maps",
    "title": "Hands-on Exercise 1",
    "section": "Choropleth Maps",
    "text": "Choropleth Maps\n\nBasic Map\nA basic choropleth map with no customisations can be created using the qtm function. It uses a number of defaults which may not always be useful depending on the dataset. In the example below, the pretty breaks result in a map which is not informative because of the distribution of dependency ratio.\n\ntmap_mode(\"plot\")\n\ntmap mode set to plotting\n\nqtm(mpsz_pop2020, \n    fill = \"DEPENDENCY\")\n\n\n\n\n\n\nMore Customisations\ntmap also allows us to customise each aspect of the map more finely. The code chunk below uses the same dependency ratio data as the above map but splits by quantiles instead to show the distribution more clearly. Other customisations create map elements like title, map scale, map grid and compass.\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\", \n          style = \"quantile\", \n          palette = \"Blues\",\n          title = \"Dependency ratio\") +\n  tm_layout(main.title = \"Distribution of Dependency Ratio by planning subzone\",\n            main.title.position = \"center\",\n            main.title.size = 1.2,\n            legend.height = 0.45, \n            legend.width = 0.35,\n            frame = TRUE) +\n  tm_borders(alpha = 0.5) +\n  tm_compass(type=\"8star\", size = 2) +\n  tm_scale_bar() +\n  tm_grid(alpha =0.2) +\n  tm_credits(\"Source: Planning Sub-zone boundary from Urban Redevelopment Authorithy (URA)\\n and Population data from Department of Statistics DOS\", \n             position = c(\"left\", \"bottom\"))"
  },
  {
    "objectID": "Hands-on_EX01/Hands-on_EX01.html",
    "href": "Hands-on_EX01/Hands-on_EX01.html",
    "title": "Hands-on Exercise 1",
    "section": "",
    "text": "The purpose of this exercise is to practice the basics of using geospatial data in R.\n\n\nsf is used to manipulate geospatial data and tidyverse for aspatial data. kableExtra makes tables with nicer formating.\n\n\n\n\n\nLet’s load the geospatial data.\n\nmpsz = st_read(dsn = \"data/geospatial\", \n               layer = \"MP14_SUBZONE_WEB_PL\")\n\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `D:\\lins-92\\ISSS624\\Hands-on_EX01\\data\\geospatial' using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n\ncyclingpath = st_read(dsn = \"data/geospatial\", \n                      layer = \"CyclingPath\")\n\nReading layer `CyclingPath' from data source \n  `D:\\lins-92\\ISSS624\\Hands-on_EX01\\data\\geospatial' using driver `ESRI Shapefile'\nSimple feature collection with 1625 features and 2 fields\nGeometry type: LINESTRING\nDimension:     XY\nBounding box:  xmin: 12711.19 ymin: 28711.33 xmax: 42626.09 ymax: 48948.15\nProjected CRS: SVY21\n\npreschool = st_read(\"data/geospatial/pre-schools-location-kml.kml\")\n\nReading layer `PRESCHOOLS_LOCATION' from data source \n  `D:\\lins-92\\ISSS624\\Hands-on_EX01\\data\\geospatial\\pre-schools-location-kml.kml' \n  using driver `KML'\nSimple feature collection with 1359 features and 2 fields\nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 103.6824 ymin: 1.248403 xmax: 103.9897 ymax: 1.462134\nz_range:       zmin: 0 zmax: 0\nGeodetic CRS:  WGS 84\n\n\nWe can see that each file has a different geometry type to represent different types of features.\nWe can also see that mpsz and cyclingpath both have the same projected CRS of SVY21 but preschools has a geodetic CRS of WGS 84. These refer to the coordinate systems to model geographic location and how to represent this information on a flat surface. Here is a detailed explanation on why coordinate systems are needed and the difference between a geodetic CRS (GCS) and projected CRS (PCS).\n\n\n\nThe st_geometry command displays the geometry information of a spatial dataset.\n\nst_geometry(mpsz)\n\nGeometry set for 323 features \nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\nFirst 5 geometries:\n\n\nMULTIPOLYGON (((31495.56 30140.01, 31980.96 296...\n\n\nMULTIPOLYGON (((29092.28 30021.89, 29119.64 300...\n\n\nMULTIPOLYGON (((29932.33 29879.12, 29947.32 298...\n\n\nMULTIPOLYGON (((27131.28 30059.73, 27088.33 297...\n\n\nMULTIPOLYGON (((26451.03 30396.46, 26440.47 303...\n\n\nWe can use glimpse to get an overview of the different variables in the dataset and head to view the first few entries.\n\nglimpse(mpsz)\n\nRows: 323\nColumns: 16\n$ OBJECTID   <int> 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, …\n$ SUBZONE_NO <int> 1, 1, 3, 8, 3, 7, 9, 2, 13, 7, 12, 6, 1, 5, 1, 1, 3, 2, 2, …\n$ SUBZONE_N  <chr> \"MARINA SOUTH\", \"PEARL'S HILL\", \"BOAT QUAY\", \"HENDERSON HIL…\n$ SUBZONE_C  <chr> \"MSSZ01\", \"OTSZ01\", \"SRSZ03\", \"BMSZ08\", \"BMSZ03\", \"BMSZ07\",…\n$ CA_IND     <chr> \"Y\", \"Y\", \"Y\", \"N\", \"N\", \"N\", \"N\", \"Y\", \"N\", \"N\", \"N\", \"N\",…\n$ PLN_AREA_N <chr> \"MARINA SOUTH\", \"OUTRAM\", \"SINGAPORE RIVER\", \"BUKIT MERAH\",…\n$ PLN_AREA_C <chr> \"MS\", \"OT\", \"SR\", \"BM\", \"BM\", \"BM\", \"BM\", \"SR\", \"QT\", \"QT\",…\n$ REGION_N   <chr> \"CENTRAL REGION\", \"CENTRAL REGION\", \"CENTRAL REGION\", \"CENT…\n$ REGION_C   <chr> \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\",…\n$ INC_CRC    <chr> \"5ED7EB253F99252E\", \"8C7149B9EB32EEFC\", \"C35FEFF02B13E0E5\",…\n$ FMEL_UPD_D <date> 2014-12-05, 2014-12-05, 2014-12-05, 2014-12-05, 2014-12-05…\n$ X_ADDR     <dbl> 31595.84, 28679.06, 29654.96, 26782.83, 26201.96, 25358.82,…\n$ Y_ADDR     <dbl> 29220.19, 29782.05, 29974.66, 29933.77, 30005.70, 29991.38,…\n$ SHAPE_Leng <dbl> 5267.381, 3506.107, 1740.926, 3313.625, 2825.594, 4428.913,…\n$ SHAPE_Area <dbl> 1630379.27, 559816.25, 160807.50, 595428.89, 387429.44, 103…\n$ geometry   <MULTIPOLYGON [m]> MULTIPOLYGON (((31495.56 30..., MULTIPOLYGON (…\n\n\n\nhead(mpsz, n=5) %>%\n  kable() %>%\n  kable_styling()\n\n\n\n \n  \n    OBJECTID \n    SUBZONE_NO \n    SUBZONE_N \n    SUBZONE_C \n    CA_IND \n    PLN_AREA_N \n    PLN_AREA_C \n    REGION_N \n    REGION_C \n    INC_CRC \n    FMEL_UPD_D \n    X_ADDR \n    Y_ADDR \n    SHAPE_Leng \n    SHAPE_Area \n    geometry \n  \n \n\n  \n    1 \n    1 \n    MARINA SOUTH \n    MSSZ01 \n    Y \n    MARINA SOUTH \n    MS \n    CENTRAL REGION \n    CR \n    5ED7EB253F99252E \n    2014-12-05 \n    31595.84 \n    29220.19 \n    5267.381 \n    1630379.3 \n    MULTIPOLYGON (((31495.56 30... \n  \n  \n    2 \n    1 \n    PEARL'S HILL \n    OTSZ01 \n    Y \n    OUTRAM \n    OT \n    CENTRAL REGION \n    CR \n    8C7149B9EB32EEFC \n    2014-12-05 \n    28679.06 \n    29782.05 \n    3506.107 \n    559816.2 \n    MULTIPOLYGON (((29092.28 30... \n  \n  \n    3 \n    3 \n    BOAT QUAY \n    SRSZ03 \n    Y \n    SINGAPORE RIVER \n    SR \n    CENTRAL REGION \n    CR \n    C35FEFF02B13E0E5 \n    2014-12-05 \n    29654.96 \n    29974.66 \n    1740.926 \n    160807.5 \n    MULTIPOLYGON (((29932.33 29... \n  \n  \n    4 \n    8 \n    HENDERSON HILL \n    BMSZ08 \n    N \n    BUKIT MERAH \n    BM \n    CENTRAL REGION \n    CR \n    3775D82C5DDBEFBD \n    2014-12-05 \n    26782.83 \n    29933.77 \n    3313.625 \n    595428.9 \n    MULTIPOLYGON (((27131.28 30... \n  \n  \n    5 \n    3 \n    REDHILL \n    BMSZ03 \n    N \n    BUKIT MERAH \n    BM \n    CENTRAL REGION \n    CR \n    85D9ABEF0A40678F \n    2014-12-05 \n    26201.96 \n    30005.70 \n    2825.594 \n    387429.4 \n    MULTIPOLYGON (((26451.03 30... \n  \n\n\n\n\n\nWe can also create simple plots of spatial data using the base R plot function. We can use indexing to indicate the variable to group by.\n\nplot(mpsz[\"CA_IND\"])\n\n\n\n\n\n\n\nThe st_crs displays the details of a spatial dataset’s projection. In this example, the EPSG code has been wrongly specified and needs to be corrected. The st_set_crs command only changes the code but does not actually change the coordinate system. It is only used to correcting wrongly specified projection information.\n\nst_crs(mpsz)\n\nCoordinate Reference System:\n  User input: SVY21 \n  wkt:\nPROJCRS[\"SVY21\",\n    BASEGEOGCRS[\"SVY21[WGS84]\",\n        DATUM[\"World Geodetic System 1984\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]],\n            ID[\"EPSG\",6326]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"Degree\",0.0174532925199433]]],\n    CONVERSION[\"unnamed\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"Degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"Degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"(E)\",east,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1,\n                ID[\"EPSG\",9001]]],\n        AXIS[\"(N)\",north,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1,\n                ID[\"EPSG\",9001]]]]\n\n\n\nmpsz <- st_set_crs(mpsz, 3414)\n\nWarning: st_crs<- : replacing crs does not reproject data; use st_transform for\nthat\n\n\nTo change the coordinate system (called transformation or projection), we use the the st_transform function. We will use this function to transform the preschool dataset to the same projection system as the other 2 layers (SVY21).\n\npreschool <- st_transform(preschool,\n                          crs=3414)\n\n\n\n\nSometimes we have datasets that have spatial information (e.g. latitude and longitude) that are not already in geospatal file formats (shp, gpkg, kml). We will need to import them as aspatial data first then specify which variables contain the geometries and how to represent these data spatially (ie. the coordinate system).\n\nlistings <- read_csv(\"data/aspatial/listings.csv\")\n\nRows: 4252 Columns: 16\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr   (5): name, host_name, neighbourhood_group, neighbourhood, room_type\ndbl  (10): id, host_id, latitude, longitude, price, minimum_nights, number_o...\ndate  (1): last_review\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\nglimpse(listings)\n\nRows: 4,252\nColumns: 16\n$ id                             <dbl> 50646, 71609, 71896, 71903, 275343, 275…\n$ name                           <chr> \"Pleasant Room along Bukit Timah\", \"Ens…\n$ host_id                        <dbl> 227796, 367042, 367042, 367042, 1439258…\n$ host_name                      <chr> \"Sujatha\", \"Belinda\", \"Belinda\", \"Belin…\n$ neighbourhood_group            <chr> \"Central Region\", \"East Region\", \"East …\n$ neighbourhood                  <chr> \"Bukit Timah\", \"Tampines\", \"Tampines\", …\n$ latitude                       <dbl> 1.33432, 1.34537, 1.34754, 1.34531, 1.2…\n$ longitude                      <dbl> 103.7852, 103.9589, 103.9596, 103.9610,…\n$ room_type                      <chr> \"Private room\", \"Private room\", \"Privat…\n$ price                          <dbl> 80, 178, 81, 81, 52, 40, 72, 41, 49, 49…\n$ minimum_nights                 <dbl> 90, 90, 90, 90, 14, 14, 90, 8, 14, 14, …\n$ number_of_reviews              <dbl> 18, 20, 24, 48, 20, 13, 133, 105, 14, 1…\n$ last_review                    <date> 2014-07-08, 2019-12-28, 2014-12-10, 20…\n$ reviews_per_month              <dbl> 0.22, 0.28, 0.33, 0.67, 0.20, 0.16, 1.2…\n$ calculated_host_listings_count <dbl> 1, 4, 4, 4, 50, 50, 7, 1, 50, 50, 50, 4…\n$ availability_365               <dbl> 365, 365, 365, 365, 353, 364, 365, 90, …\n\n\nFrom the glimpse, we can see that the latitude and longitude variables contain the spatial information we need. The units used are decimal degrees.\nNow let’s use the st_as_sf function to transform the listings dataset into geospatial data. Use the coords argument to specify the x and y coordinates (longitude then latitude) respectively. We assume that the original coordinate system was WGS84 (EPSG 4326) and reproject it to SVY21 (EPSG 3414).\n\nlistings_sf <- st_as_sf(listings,\n                        coords = c(\"longitude\", \"latitude\"),\n                        crs = 4326) %>%\n  st_transform(crs=3414)\n\n\n\n\n\n\n\nBuffers create a zone around a feature. It is used in geospatial analyses in conjunction with other functions to measure access to amenities (e.g. how many households are within 500m proximity to an MRT station?). The function is st_buffer.\nIn this example, we want to calculate the area of land that needs to be set aside for to 5m wide cycling paths.. The original cycling path layer is a polyline dataset which has no width so we need to use create a buffer first then calculate area using the st_area function.\n\nbuffer_cycling <- st_buffer(cyclingpath, \n                            dist=5, nQuadSegs = 30)\n\nbuffer_cycling$area = st_area(buffer_cycling)\n\nsum(buffer_cycling$area)\n\n773143.9 [m^2]\n\n\n\n\n\nCounting the number of points (features) in a polygon is another common geoprocessing tool. We use the st_intersects function to relate the point and polygon layers spatially. It will output a list of points located within each polygon (by their respective indices). The lengths function from base R is used to find the number of elements (ie pre-schools) in each polygon.\nIn this example, we will count the number of pre-schools in each subzone.\n\nmpsz <- mpsz %>%\n  mutate(preschools = lengths(st_intersects(x=mpsz,y=preschool)))\n\nplot(mpsz[\"preschools\"])"
  },
  {
    "objectID": "Hands-on_EX01/Hands-on_EX01.html#importing-and-preparing-data-1",
    "href": "Hands-on_EX01/Hands-on_EX01.html#importing-and-preparing-data-1",
    "title": "Hands-on Exercise 1",
    "section": "Importing and Preparing Data",
    "text": "Importing and Preparing Data\n\nLoading and Manipulating Data\nThis exercise uses the mpsz dataset from Part 1 and a new attribute dataset containing population data by subzone.\n\npopdata <- read_csv(\"data/aspatial/respopagesextod2011to2020.csv\")\n\nRows: 984656 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (5): PA, SZ, AG, Sex, TOD\ndbl (2): Pop, Time\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\nglimpse(popdata)\n\nRows: 984,656\nColumns: 7\n$ PA   <chr> \"Ang Mo Kio\", \"Ang Mo Kio\", \"Ang Mo Kio\", \"Ang Mo Kio\", \"Ang Mo K…\n$ SZ   <chr> \"Ang Mo Kio Town Centre\", \"Ang Mo Kio Town Centre\", \"Ang Mo Kio T…\n$ AG   <chr> \"0_to_4\", \"0_to_4\", \"0_to_4\", \"0_to_4\", \"0_to_4\", \"0_to_4\", \"0_to…\n$ Sex  <chr> \"Males\", \"Males\", \"Males\", \"Males\", \"Males\", \"Males\", \"Males\", \"M…\n$ TOD  <chr> \"HDB 1- and 2-Room Flats\", \"HDB 3-Room Flats\", \"HDB 4-Room Flats\"…\n$ Pop  <dbl> 0, 10, 30, 50, 0, 0, 40, 0, 0, 10, 30, 60, 0, 0, 40, 0, 0, 10, 30…\n$ Time <dbl> 2011, 2011, 2011, 2011, 2011, 2011, 2011, 2011, 2011, 2011, 2011,…\n\n\n\nhead(popdata, n=5) %>%\n  kable() %>%\n  kable_styling()\n\n\n\n \n  \n    PA \n    SZ \n    AG \n    Sex \n    TOD \n    Pop \n    Time \n  \n \n\n  \n    Ang Mo Kio \n    Ang Mo Kio Town Centre \n    0_to_4 \n    Males \n    HDB 1- and 2-Room Flats \n    0 \n    2011 \n  \n  \n    Ang Mo Kio \n    Ang Mo Kio Town Centre \n    0_to_4 \n    Males \n    HDB 3-Room Flats \n    10 \n    2011 \n  \n  \n    Ang Mo Kio \n    Ang Mo Kio Town Centre \n    0_to_4 \n    Males \n    HDB 4-Room Flats \n    30 \n    2011 \n  \n  \n    Ang Mo Kio \n    Ang Mo Kio Town Centre \n    0_to_4 \n    Males \n    HDB 5-Room and Executive Flats \n    50 \n    2011 \n  \n  \n    Ang Mo Kio \n    Ang Mo Kio Town Centre \n    0_to_4 \n    Males \n    HUDC Flats (excluding those privatised) \n    0 \n    2011 \n  \n\n\n\n\n\nFor this exercise, we will only be using the 2020 data. We need to relate the attribute data to the mpsz dataset. First, we need to manipulate the attribute data to create the following variables:\n\nYOUNG: age group 0 to 4 until age group 20 to 24\nECONOMYACTIVE: age group 25-29 until age group 60-64\nAGED: age group 65 and above\nTOTAL: all age group\nDEPENDENCY: the ratio between young and aged against economy active group\n\n\npop2020 <- popdata %>%\n  filter(Time==2020) %>%\n  group_by(PA, SZ, AG) %>%\n  summarise(POP = sum(Pop)) %>%\n  ungroup() %>%\n  pivot_wider(names_from = AG, \n              values_from = POP) %>%\n  mutate(YOUNG = rowSums(.[3:6])+ rowSums(.[12])) %>%\n  mutate(ECONOMYACTIVE = rowSums(.[7:11]) + rowSums(.[13:15])) %>%\n  mutate(AGED=rowSums(.[16:21])) %>%\n  mutate(TOTAL=rowSums(.[3:21])) %>%  \n  mutate(DEPENDENCY = (YOUNG + AGED)/ ECONOMYACTIVE) %>%\n  select(PA, SZ, YOUNG, ECONOMYACTIVE, AGED, TOTAL, DEPENDENCY) %>%\n  mutate(across(PA:SZ, toupper))\n\n`summarise()` has grouped output by 'PA', 'SZ'. You can override using the\n`.groups` argument.\n\n\nJoin the attribute data to the mpsz data by SZ. In the previous step, we manipulated this variable to be uppercase to match with the mpsz file.\n\nmpsz_pop2020 <- left_join(x=mpsz,\n                          y=pop2020,\n                          by= c(\"SUBZONE_N\" = \"SZ\"))"
  },
  {
    "objectID": "Hands-on_EX01/Hands-on_EX01.html#choropleth-maps",
    "href": "Hands-on_EX01/Hands-on_EX01.html#choropleth-maps",
    "title": "Hands-on Exercise 1",
    "section": "Choropleth Maps",
    "text": "Choropleth Maps\n\nBasic Map\nA basic choropleth map with no customisations can be created using the qtm function. It uses a number of defaults which may not always be useful depending on the dataset. In the example below, the pretty breaks result in a map which is not informative because of the outlier.\n\ntmap_mode(\"plot\")\n\ntmap mode set to plotting\n\nqtm(mpsz_pop2020, \n    fill = \"DEPENDENCY\")\n\n\n\n\n\n\nMore Customisations\ntmap also allows us to customise each aspect of the map more finely. The code chunk below uses the same dependency ratio data as the above map but splits by quantiles instead to show the distribution more clearly. Other customisations create map elements like title, map scale, map grid and compass.\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\", \n          style = \"quantile\", \n          palette = \"Blues\",\n          title = \"Dependency ratio\") +\n  tm_layout(main.title = \"Distribution of Dependency Ratio by planning subzone\",\n            main.title.position = \"center\",\n            main.title.size = 1.2,\n            legend.height = 0.45, \n            legend.width = 0.35,\n            frame = TRUE) +\n  tm_borders(alpha = 0.5) +\n  tm_compass(type=\"8star\", size = 2) +\n  tm_scale_bar() +\n  tm_grid(alpha =0.2) +\n  tm_credits(\"Source: Planning Sub-zone boundary from Urban Redevelopment Authorithy (URA)\\n and Population data from Department of Statistics DOS\", \n             position = c(\"left\", \"bottom\"))\n\n\n\n\nThere are also other styles to create breaks. The map below uses the hclust method to create breaks and the number of breaks is increased to 10. Although the number of breaks is increased, the map is not necessarily more informative than the previous map using 5 quantile breaks.\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\", \n          n=10,\n          style = \"hclust\", \n          palette = \"Reds\",\n          title = \"Dependency ratio\") +\n  tm_layout(main.title = \"Distribution of Dependency Ratio by planning subzone\",\n            main.title.position = \"center\",\n            main.title.size = 1.2,\n            legend.height = 0.45, \n            legend.width = 0.35,\n            frame = TRUE) +\n  tm_borders(alpha = 0.5) +\n  tm_compass(type=\"8star\", size = 2) +\n  tm_scale_bar() +\n  tm_grid(alpha =0.2) +\n  tm_credits(\"Source: Planning Sub-zone boundary from Urban Redevelopment Authorithy (URA)\\n and Population data from Department of Statistics DOS\", \n             position = c(\"left\", \"bottom\"))"
  }
]